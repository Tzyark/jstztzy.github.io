<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rem&#39;s Zone</title>
  <icon>https://www.gravatar.com/avatar/5baa8ae6fa4b185fe675baab98e20b33</icon>
  <subtitle>「好きだ」なんて あぁ 言えたら</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jstztzy.github.io/"/>
  <updated>2017-09-23T16:50:06.718Z</updated>
  <id>http://jstztzy.github.io/</id>
  
  <author>
    <name>jstztzy</name>
    <email>jstztzy@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AtCoder Regular Contest 082</title>
    <link href="http://jstztzy.github.io/2017/09/24/AtCoder-Regular-Contest-082/"/>
    <id>http://jstztzy.github.io/2017/09/24/AtCoder-Regular-Contest-082/</id>
    <published>2017-09-23T16:39:55.000Z</published>
    <updated>2017-09-23T16:50:06.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Together"><a href="#C-Together" class="headerlink" title="C - Together"></a><center><a href="http://arc082.contest.atcoder.jp/tasks/arc082_a" target="_blank" rel="external">C - Together</a></center></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$N$个数，求它们或加一或减一或不变的众数。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>没什么好说的。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> cnt[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> ai = read();</div><div class="line">        cnt[ ai ]++, cnt[ ai+<span class="number">1</span> ]++, cnt[ ai<span class="number">-1</span> ]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1e5</span>; i++) res = max(res, cnt[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="D-Derangement"><a href="#D-Derangement" class="headerlink" title="D - Derangement"></a><center><a href="http://arc082.contest.atcoder.jp/tasks/arc082_b" target="_blank" rel="external">D - Derangement</a></center></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定$N$个数的一个排列，每次只能交换相邻两数，求最少的交换次数使得$p_i\neq i$。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>模拟一下，如果碰到$p_i=i$就把它和后面一个数交换。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> p[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = read();</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">if</span> (p[i] == i) res++, swap(p[i], p[i + <span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (p[n] == n) res++;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="E-ConvexScore"><a href="#E-ConvexScore" class="headerlink" title="E - ConvexScore"></a><center><a href="http://arc082.contest.atcoder.jp/tasks/arc082_c" target="_blank" rel="external">E - ConvexScore</a></center></h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定$N$个点$(x_i,y_i)$，定义这$N$个点的子集$S$为“凸多边形集”当且仅当$S$中所有点恰好构成一个凸多边形。对一个“凸多边形集”$S$，定义它的$score$为$2^{n-|S|}$，其中$n$为$S$构成的凸多边形包含（包括边上）的$N$个点中的点数。求所有“凸多边形集”的$score$之和对$998244353$取模的结果。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>题目要我们求的$2^{n-|S|}$对应的是一种集合取点的方案。<br>我们考虑这$N$个点的任意子集$X$要被计算$score$，当且仅当它的凸包面积为正。<br>再进一步，计算时<strong>任意凸包面积为正的子集对$score$的贡献为$1$</strong>，因为你把凸包上的点作为“凸多边形集”，其余的点作为一种取点的方案，恰好对应了“凸多边形集”的所有取点方案。<br>然后我们就只要从$2^N$中把能组成直线的点集去掉。（注意不要重复算单点和空集的情况）<br>去除共线的点集时，我们考虑枚举$N^2$个点对组成的线段，先把斜率化成最简分数$hash$一下排个序，然后对每个线段<strong>并查集</strong>维护即可。时间复杂度：$\Theta (N^2logN)$。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Q = <span class="number">998244353</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">209</span>;</div><div class="line">ll x[N], y[N], p[N], f[N], size[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findSet</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = findSet(f[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">unionSet</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> fx = findSet(x), fy = findSet(y);</div><div class="line">    <span class="keyword">if</span> (fx != fy) &#123;</div><div class="line">        f[fy] = fx;</div><div class="line">        size[fx] += size[fy];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> p, q; ll hash;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Seg &amp;rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> hash &lt; rhs.hash;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Seg&gt; seg;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</div><div class="line">        p[i] = p[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>, p[i] %= Q;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        x[i] = read(), y[i] = read();</div><div class="line">    &#125;</div><div class="line">    ll res = (p[n] - n - <span class="number">1</span>) % Q;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> dx = x[i] - x[j], dy = y[i] - y[j], g = gcd(dx, dy);</div><div class="line">            dx /= g, dy /= g;</div><div class="line">            <span class="keyword">if</span> (dx == <span class="number">0</span>) dy = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (dy == <span class="number">0</span>) dx = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (dx &lt; <span class="number">0</span>) dx *= <span class="number">-1</span>, dy *= <span class="number">-1</span>;</div><div class="line">            Seg s; s.p = i, s.q = j, s.hash = dx * <span class="number">100000</span> + dy;</div><div class="line">            seg.push_back(s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(seg.begin(), seg.end());</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; seg.size(); i = j) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</div><div class="line">            f[k] = k, size[k] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (; j &lt; seg.size() &amp;&amp; seg[i].hash == seg[j].hash; j++) &#123;</div><div class="line">            unionSet(seg[j].p, seg[j].q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</div><div class="line">            <span class="keyword">if</span> (f[k] == k &amp;&amp; size[k] &gt;= <span class="number">2</span>) &#123;</div><div class="line">                res -= (p[ size[k] ] - size[k] - <span class="number">1</span>), res += Q, res %= Q;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="F-Sandglass"><a href="#F-Sandglass" class="headerlink" title="F - Sandglass"></a><center><a href="http://arc082.contest.atcoder.jp/tasks/arc082_d" target="_blank" rel="external">F - Sandglass</a></center></h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给定一个总容量为$X$的沙漏，初始状态$A$部分有$a$克沙子，$B$部分有$X-a$克沙子，每秒钟掉下来$1$克沙子。有$K$个$r_i$时刻会将沙漏倒置。现在有$Q$个询问$(t_i,a_i)$，初始$A$部分在上面且有沙子$a_i$克。求在$t_i$时刻$A$部分的沙子多少克。</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>假设$A$部分沙子初始有$x$克，在$t$时刻时的沙子有$f_t(x)$克。<br>当某时刻$A$部分有$y$克沙子时，下一秒钟：<br>若$A$部分在上面，则$f_t(x)=g_1(y)=max(y-1,0)$;<br>若$A$部分在下面，则$f_t(x)=g_2(y)=max(y+1,X)$.<br>因为$f_t$是在函数$g_1,g_2$下封闭的，所以它一定是个如下的线性分段函数：<br>$\begin{equation}<br>  f_t(x)=<br>  \begin{cases}<br>  a+c,&amp;0\leq x\leq a\newline<br>  x+c,&amp;a\leq x\leq b\newline<br>  b+c,&amp;b\leq x\leq X<br>  \end{cases}<br>\end{equation}$<br>对于每个$t$维护上式中的$a,b,c$，然后回答询问即可。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line">ll r[K];</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">(ll &amp;v, ll x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (v &gt; x) v = x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll x = read(), k = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) r[i] = read();</div><div class="line">    ll q = read();</div><div class="line">    ll low = <span class="number">0</span>, mid = <span class="number">0</span>, upp = x;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, sign = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (q--) &#123;</div><div class="line">        ll t = read(), a = read();</div><div class="line">        <span class="keyword">while</span> (i &lt;= k &amp;&amp; r[i] &lt;= t) &#123;</div><div class="line">            ll dta = (r[i] - r[i - <span class="number">1</span>]) * sign;</div><div class="line">            low += dta, upp += dta, mid += dta;</div><div class="line">            turn(low, x), turn(mid, x);</div><div class="line">            i++, sign *= <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        ll res = a + mid;</div><div class="line">        ll dta = (t - r[i - <span class="number">1</span>]) * sign;</div><div class="line">        <span class="keyword">if</span> (res &lt; low) res = low;</div><div class="line">        <span class="keyword">if</span> (res &gt; upp) res = upp;</div><div class="line">        res += dta, turn(res, x);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-Together&quot;&gt;&lt;a href=&quot;#C-Together&quot; class=&quot;headerlink&quot; title=&quot;C - Together&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;a href=&quot;http://arc082.contest.atcoder.jp/task
      
    
    </summary>
    
    
      <category term="AtCoder" scheme="http://jstztzy.github.io/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #433</title>
    <link href="http://jstztzy.github.io/2017/09/24/Codeforces-Round-433/"/>
    <id>http://jstztzy.github.io/2017/09/24/Codeforces-Round-433/</id>
    <published>2017-09-23T16:26:14.000Z</published>
    <updated>2017-09-23T16:30:12.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="854A-Fraction"><a href="#854A-Fraction" class="headerlink" title="854A. Fraction"></a><center><a href="http://codeforces.com/problemset/problem/854/A" target="_blank" rel="external">854A. Fraction</a></center></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$，求分子分母和为$n$且分母最大的最简分数。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>暴力枚举。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = n / <span class="number">2</span>; a &gt;= <span class="number">1</span>; a--) &#123;</div><div class="line">        <span class="keyword">int</span> b = n - a;</div><div class="line">        <span class="keyword">if</span> (gcd(a, b) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, a, b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="854B-Maxim-Buys-an-Apartment"><a href="#854B-Maxim-Buys-an-Apartment" class="headerlink" title="854B. Maxim Buys an Apartment"></a><center><a href="http://codeforces.com/problemset/problem/854/B" target="_blank" rel="external">854B. Maxim Buys an Apartment</a></center></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定$n$和$k$，表示$n$个连续位置中已经放了$k$个点。现在继续在剩余位置放点，必须与$k$个点中至少一个相邻。求能放的点的数量最小值和最大值。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>最小值，除非$k=0$或$k=n$时为$0$，其他情况都为$1$。<br>最大值，考虑将$k$个点相隔两个放置一定最优，也就是一个点能管包括本身在内的三个点，画个图就明白了。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll n, k; <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">if</span> (k == n || k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"0 0"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"1 %lld\n"</span>, k * <span class="number">3</span> &gt;= n ? n - k : k * <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="853A-Planning"><a href="#853A-Planning" class="headerlink" title="853A. Planning"></a><center><a href="http://codeforces.com/problemset/problem/853/A" target="_blank" rel="external">853A. Planning</a></center></h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定$n$架飞机$1-n$，本来第$i$架对应在第$i$分钟起飞。由于延误，起飞时间区间改为$[k+1,k+n]$。第$i$架飞机延迟一分钟损失$c_i$。调整起飞时间，要求不能同时起飞，不能比原来早。求最小损失。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>贪心：对于$[k+1,k+n]$内的每个时刻，我们尽可能让能起飞且损失最大的飞机起飞。<br>下面我们简单证明一下：<br>设每架飞机新的起飞时间为$t<em>i$，则总损失为$\sum</em>{i=1}^{n}c_i\times (t<em>i-i)=\sum</em>{i=1}^{n}c_i\times t<em>i-\sum</em>{i=1}^{n}c<em>i\times i$。<br>我们注意到$\sum</em>{i=1}^{n}c<em>i\times i$是个常数，要求总损失最小，即让$\sum</em>{i=1}^{n}c_i\times t_i$最小。联想<strong>排序不等式</strong>，容易证明贪心的正确性。<br>在贪心过程中，我们需要维护当前时间能起飞飞机的损失最大值，使用$Heap$、$STL$中的$set$或$priority\_queue$即可。<br>时间复杂度：$\Theta(n\times logn)$。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pir;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> c[N], res[N];</div><div class="line">priority_queue&lt;pir&gt; pq;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), k = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i] = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) pq.push(make_pair(c[i], i));</div><div class="line">    ll cost = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k + <span class="number">1</span>; i &lt;= k + n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i &lt;= n) pq.push(make_pair(c[i], i));</div><div class="line">        <span class="keyword">int</span> t = pq.top().second;</div><div class="line">        pq.pop();</div><div class="line">        res[t] = i;</div><div class="line">        cost += <span class="number">1l</span>l * (i - t) * c[t];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, cost);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, res[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res[n]);;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="853B-Jury-Meeting"><a href="#853B-Jury-Meeting" class="headerlink" title="853B. Jury Meeting"></a><center><a href="http://codeforces.com/problemset/problem/853/B" target="_blank" rel="external">853B. Jury Meeting</a></center></h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个城市的人要去城市$0$开会，有$m$架从城市$0$出发或者到达城市$0$的飞机，要求每个城市的人来了还要回去且$n$个城市的人呆在一起的时间大于等于$k$天。求最小花费。</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>首先，每个城市的人都需要一架去、一架回的飞机，那么在时间轴上，即要选$n$个线段使它们重合部分长度$\geq k$。<br>然后，我们考虑若第$i$天所有城市的人都在城市$0$，第$i$天之前要有$n$架不同飞机到达城市$0$，之后也要有$n$架不同飞机离开城市$0$。对于第$i$天，预处理<strong>前缀和</strong>$pre_i,suf<em>i$，分别表示第$i$天前、后，$n$架不同城市的飞机到达、离开城市$0$所需要的最少花费。<br>最后，按天数扫一遍，取$min</em>{1\leq i\leq d_{max}}pre<em>i+suf</em>{i+k+1}$即可。<br>时间复杂度：$\Theta(m\times logm+n)$。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pir;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> D = <span class="number">1e6</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">1e12</span>;</div><div class="line"><span class="built_in">vector</span>&lt;pir&gt; fr[N], to[N];</div><div class="line">ll pre[D], suf[D];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), m = read(), k = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> d = read(), f = read(), t = read(), c = read();</div><div class="line">        <span class="keyword">if</span> (f) fr[f].push_back(make_pair(d, c));</div><div class="line">        <span class="keyword">if</span> (t) to[t].push_back(make_pair(d, c));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)     &#123;</div><div class="line">        sort(fr[i].begin(), fr[i].end(), less&lt;pir&gt;());</div><div class="line">        ll l1 = INF; pre[<span class="number">0</span>] += l1;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : fr[i]) &#123;</div><div class="line">            pre[p.first] += min(<span class="number">0l</span>l, p.second - l1);</div><div class="line">            l1 += min(<span class="number">0l</span>l, p.second - l1);</div><div class="line">        &#125;</div><div class="line">        sort(to[i].begin(), to[i].end(), greater&lt;pir&gt;());</div><div class="line">        ll l2 = INF; suf[D - <span class="number">1</span>] += l2;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : to[i]) &#123;</div><div class="line">            suf[p.first] += min(<span class="number">0l</span>l, p.second - l2);</div><div class="line">            l2 += min(<span class="number">0l</span>l, p.second - l2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; D; j++) pre[j] += pre[j - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = D - <span class="number">2</span>; j; j--) suf[j] += suf[j + <span class="number">1</span>];</div><div class="line">    ll res = n * INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D - k - <span class="number">1</span>; j++) res = min(res, pre[j] + suf[j + k + <span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * (res &gt;= INF ? <span class="built_in">puts</span>(<span class="string">"-1\n"</span>) : <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="853C-Boredom"><a href="#853C-Boredom" class="headerlink" title="853C. Boredom"></a><center><a href="http://codeforces.com/problemset/problem/853/C" target="_blank" rel="external">853C. Boredom</a></center></h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p>给定一个$n\times n$的点阵，每列有一个标记点；定义“美丽矩形”为任意两个标记点构成的矩形，显然一共有$\frac{n\times(n-1)}{2}$个。有$q$个询问，每次询问一个矩形与多少个“美丽矩形”相交。</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>我们考虑每个询问的矩形，将它的四条边延长下去，会将原来的点阵最多划分成$9$个矩形，统计每个小矩形中标记点的数量，简单容斥一下就能得到答案。<br>下面主要任务是预处理出前$i$列$[l,r]$行中标记点的数量，这个用<strong>可持久化线段树</strong>即可。<br>时间复杂度：$\Theta(n\times logn+8q\times logn)$。</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> tot, root[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, sum;</div><div class="line">&#125; tree[N * <span class="number">40</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1l</span>l * x * (x - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t, <span class="keyword">int</span> tt)</span> </span>&#123;</div><div class="line">    tree[t].sum++;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (m &lt;= mid) &#123;</div><div class="line">            tree[t].l = ++tot;</div><div class="line">            tree[ tree[t].l ] = tree[ tree[tt].l ];</div><div class="line">            update(m, l, mid, tree[t].l, tree[tt].l);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            tree[t].r = ++tot;</div><div class="line">            tree[ tree[t].r ] = tree[ tree[tt].r ];</div><div class="line">            update(m, mid+<span class="number">1</span>, r, tree[t].r, tree[tt].r);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t, <span class="keyword">int</span> tt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ql &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> tree[t].sum - tree[tt].sum;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>, mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (ql &lt;= mid) ret += query(ql, qr, l, mid, tree[t].l, tree[tt].l);</div><div class="line">        <span class="keyword">if</span> (qr &gt; mid) ret += query(ql, qr, mid+<span class="number">1</span>, r, tree[t].r, tree[tt].r);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), q = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> p = read();</div><div class="line">        root[i] = ++tot;</div><div class="line">        tree[ root[i] ] = tree[ root[i - <span class="number">1</span>] ];</div><div class="line">        update(p, <span class="number">1</span>, n, root[i], root[i - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</div><div class="line">        <span class="keyword">int</span> l = read(), d = read(), r = read(), u = read();</div><div class="line">        ll res = f(n);</div><div class="line">        res -= f( query(<span class="number">1</span>, d<span class="number">-1</span>, <span class="number">1</span>, n, root[n], root[<span class="number">0</span>]) );</div><div class="line">        res -= f( query(u+<span class="number">1</span>, n, <span class="number">1</span>, n, root[n], root[<span class="number">0</span>]) );</div><div class="line">        res -= f( query(<span class="number">1</span>, n, <span class="number">1</span>, n, root[l<span class="number">-1</span>], root[<span class="number">0</span>]) );</div><div class="line">        res -= f( query(<span class="number">1</span>, n, <span class="number">1</span>, n, root[n], root[r]) );</div><div class="line">        res += f( query(<span class="number">1</span>, d<span class="number">-1</span>, <span class="number">1</span>, n, root[l<span class="number">-1</span>], root[<span class="number">0</span>]));</div><div class="line">        res += f( query(<span class="number">1</span>, d<span class="number">-1</span>, <span class="number">1</span>, n, root[n], root[r]));</div><div class="line">        res += f( query(u+<span class="number">1</span>, n, <span class="number">1</span>, n, root[n], root[r]));</div><div class="line">        res += f( query(u+<span class="number">1</span>, n, <span class="number">1</span>, n, root[l<span class="number">-1</span>], root[<span class="number">0</span>]));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="853D-Michael-and-Charging-Stations"><a href="#853D-Michael-and-Charging-Stations" class="headerlink" title="853D. Michael and Charging Stations"></a><center><a href="http://codeforces.com/problemset/problem/853/D" target="_blank" rel="external">853D. Michael and Charging Stations</a></center></h1><h2 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个商品价格为$a_i=1000$或$a_i=2000$。每件商品若付全款，则将返回$10\%$的钱来抵现金。求最小花费。</p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p><del>吾本以为$Div1.D$必有高论。。。</del><br>裸$DP$。<br>首先，我们用$dp[i][j]$表示前$i$天可以抵现金的钱为$j$的最小花费。<br>然后，我们把价格都除以$100$，发现当前状态能抵现金的钱不可能超过$30$，否则显然可以用来买下一个商品，那么$j\leq 30$。<br>最后，$dp$方程就很显然了：<br>$\begin{equation}<br>  dp[i][j]=min<br>  \begin{cases}<br>  dp[i-1][j-\frac{a_i}{10}]+a_i&amp;，付全款\newline<br>  dp[i-1][j+max(0,a_i-j)]+max(0,a_i-j)&amp;，抵现金\newline<br>  \end{cases}<br>\end{equation}$<br>时间复杂度：$\Theta(30\times n)$。</p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> a[N], dp[<span class="number">2</span>][<span class="number">31</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read() / <span class="number">100</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) dp[<span class="number">0</span>][i] = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, b = <span class="number">1</span>; i &lt;= n; i++, b ^= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">30</span>; j++) dp[b][j] = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">30</span>; j++) &#123;</div><div class="line">            dp[b][ j + a[i] / <span class="number">10</span> ] = min(dp[b][ j + a[i] / <span class="number">10</span> ], dp[b ^ <span class="number">1</span>][j] + a[i]);</div><div class="line">            dp[b][ j - a[i] + max(a[i] - j, <span class="number">0</span>) ] = min(dp[b][ j - a[i] + max(a[i] - j, <span class="number">0</span>) ], dp[b ^ <span class="number">1</span>][j] + max(a[i] - j, <span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30</span>; i++) res = min(res, dp[n % <span class="number">2</span>][i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d00\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;854A-Fraction&quot;&gt;&lt;a href=&quot;#854A-Fraction&quot; class=&quot;headerlink&quot; title=&quot;854A. Fraction&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;a href=&quot;http://codeforces.com/problem
      
    
    </summary>
    
    
      <category term="CodeForces" scheme="http://jstztzy.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 28</title>
    <link href="http://jstztzy.github.io/2017/09/22/Educational-Codeforces-Round-28/"/>
    <id>http://jstztzy.github.io/2017/09/22/Educational-Codeforces-Round-28/</id>
    <published>2017-09-22T10:59:00.000Z</published>
    <updated>2017-09-23T16:27:56.275Z</updated>
    
    <content type="html"><![CDATA[<p>#<center><a href="http://codeforces.com/problemset/problem/846/A" target="_blank" rel="external">846A. Curriculum Vitae</a></center></p><p>##题意<br>给定一个长度为$n$的$01$序列，删掉一些数，使得最终数列中$0$不直接跟在$1$后面，求最长长度。</p><p>##题解<br>最终序列一定是$000…111$形式的，$\Theta(n)$枚举最后一个$0$的位置，用前缀和$\Theta(1)$统计一下即可。<br>时间复杂度：$\Theta(n)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">109</span>;</div><div class="line"><span class="keyword">int</span> s[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (r &gt;= l ? s[r] - s[l - <span class="number">1</span>] : <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i] = read() + s[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) res = max(res, i - count(<span class="number">1</span>, i) + count(i + <span class="number">1</span>, n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/B" target="_blank" rel="external">846B. Math Show</a></center></p><p>##题意<br>给定$n$个大题，每个大题都有$k$个小题，第$i$个小题需要花费$t_i$分钟。每做出一小题得$1$分，每做出完整的一个大题多得一分，即$k+1$分。求在$M$分钟完成的最大得分。</p><p>##题解<br>先枚举完整做出的大题数，再按每小题花费时间的<strong>贪心</strong>即可。<br>时间复杂度：$\Theta(n^2\times k)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">59</span>;</div><div class="line"><span class="keyword">int</span> t[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), k = read(), m = read(), s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) t[i] = read(), s += t[i];</div><div class="line">    sort(t + <span class="number">1</span>, t + k + <span class="number">1</span>);</div><div class="line">    ll res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</div><div class="line">        ll tim = i * s, cur = i * (k + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (tim &gt; m) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (tim + (n - i) * t[j] &lt;= m) tim += (n - i) * t[j], cur += (n - i);</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">while</span> (tim + t[j] &lt;= m) tim += t[j], cur++;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        res = max(res, cur);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/C" target="_blank" rel="external">846C. Four Segments</a></center></p><p>##题意<br>给定长度为$n$的数列$a_0,a<em>1,…,a</em>{n-1}$，定义$sum(l,r)$为区间$[l,r)$内$a_i$的和。求三个数$delim_0,delim_1,delim_2(0\leq delim_0\leq delim_1\leq delim_2<br>\leq n)$将数列分成四段，使得$res=sum(0,delim_0)-sum(delim_0,delim_1)+sum(delim_1,delim_2)-sum(delim_2,n)$最大。</p><p>##题解<br>考虑先枚举$delim_1$定下来，再在区间$[0,delim_1]$和$[delim_1,n]$中分别枚举$delim_0$和$delim_2$，这时只要让$sum(0,d_0)$和$sum(d1,d2)$同时取最大，用<strong>前缀和</strong>加速即可。<br>时间复杂度：$\Theta(n^2)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DE(x) cout &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5009</span>;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line">ll s[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sol</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> d0, d1, d2;</div><div class="line">    ll res;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &lt; <span class="number">0</span>) <span class="keyword">return</span> s[r - <span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> l &lt;= r ? s[r - <span class="number">1</span>] - s[l - <span class="number">1</span>] : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = read();</div><div class="line">    s[<span class="number">0</span>] = a[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) s[i] = s[i - <span class="number">1</span>] + a[i];</div><div class="line">    Sol ans; ans.d0 = ans.d1 = ans.d2 = ans.res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d1 = <span class="number">0</span>; d1 &lt;= n; d1++) &#123;</div><div class="line">        <span class="keyword">int</span> d0 = d1, d2 = d1;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= d1; j++) <span class="keyword">if</span> (sum(<span class="number">0</span>, j) &gt; sum(<span class="number">0</span>, d0)) d0 = j;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = d1; j &lt;= n; j++) <span class="keyword">if</span> (sum(d1, j) &gt; sum(d1, d2)) d2 = j;</div><div class="line">        ll res = sum(<span class="number">0</span>, d0) - sum(d0, d1) + sum(d1, d2) - sum(d2, n);</div><div class="line">        <span class="keyword">if</span> (res &gt; ans.res) ans.res = res, ans.d0 = d0, ans.d1 = d1, ans.d2 = d2;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, ans.d0, ans.d1, ans.d2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/D" target="_blank" rel="external">846D. Monitor</a></center></p><p>##题意<br>给定一$n\times m$个的点阵，其中有$q$个点$(x_i,y_i)$会在$t_i$时刻变成坏点。求最少何时，存在一个$k\times k$的点阵全是坏点。</p><p>##题解<br><strong>二分</strong>时间，单调性显然，用<strong>二维前缀和</strong>判断是否全是坏点即可。<br>时间复杂度：$\Theta(n^2\times \log q)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">509</span>;</div><div class="line"><span class="keyword">int</span> n, m, k, q, x[N*N], y[N*N], t[N*N], s[N][N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">broke</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="keyword">if</span> (t[i] &lt;= mid) s[ x[i] ][ y[i] ] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</div><div class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (s[i][j] - s[i - k][j] - s[i][j - k] + s[i - k][j - k] == k * k) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    n = read(), m = read(), k = read(), q = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) x[i] = read(), y[i] = read(), t[i] = read(), t[<span class="number">0</span>] = max(t[<span class="number">0</span>], t[i]);</div><div class="line">    <span class="keyword">int</span> l = <span class="number">-1</span>, r = t[<span class="number">0</span>] + <span class="number">1</span>, res = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (l + <span class="number">1</span> &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (broke(mid)) r = mid, res = r; <span class="keyword">else</span> l = mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/E" target="_blank" rel="external">846E. Chemistry in Berland</a></center></p><p>##题意<br>给定$n$个物品，现各有$b_i$千克，各需要$a_i$千克。其中$k_i$千克的$x_i$物品可以转化成$1$千克的$i$物品，$1$千克的$i$物品可以转化成$1$千克的$x_i$物品。判断能否通过转化使得$n$种物品都满足需求。</p><p>##题解<br>树形$DP$。按着题目所述转化条件转移状态即可。注意数据范围。<br>时间复杂度：$\Theta(n)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line">ll sum, a[N], b[N], x[N], k[N];</div><div class="line"><span class="built_in">vector</span>&lt;pll&gt; g[N];</div><div class="line"><span class="keyword">bool</span> flag = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : g[u]) &#123;</div><div class="line">        <span class="keyword">int</span> k = e.first, v = e.second;</div><div class="line">        dfs(v);</div><div class="line">        <span class="keyword">if</span> (b[v] &gt; <span class="number">0</span>) b[u] += b[v];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">double</span> w = <span class="number">1.0</span> * b[v] * k;</div><div class="line">            <span class="keyword">if</span> (b[u] + w &lt; -sum) flag = <span class="number">0</span>;</div><div class="line">            b[u] += b[v] * k;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b[i] = read(), sum += b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read(), b[i] -= a[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x = read(), k = read();</div><div class="line">        g[x].push_back(make_pair(k, i));</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(b[<span class="number">1</span>] &gt;= <span class="number">0</span> ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/F" target="_blank" rel="external">846F. Random Query</a></center></p><p>##题意<br>给定$n$个正整数$a_i$，每次随机地选择两个数$l,r$（若$l&gt;r$，则交换两者），定义$(l,r)$的$value$为$a<em>l,a</em>{l+1},…,a_r$中不同的数的个数。求$value$的期望。</p><p>##题解<br>我们考虑计算$a<em>l,a</em>{l+1},…,a_r$中每个数第一次出现的位置。记$pre[i]$表示$i$之前与$a_i$相等的最近的一个数的位置，则$a<em>i$能对所有$l\in (pre[i],i],r\in [i,n]$的所有区间产生$1$个贡献。<br>故所求期望为$res=\frac{2*\sum</em>{i=1}^{n}{(i-pre[i])(n-i+1)}-n}{n^2}$。<br>时间复杂度：$\Theta(n)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> a[N], pos[N], pre[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read(), pre[i] = pos[ a[i] ], pos[ a[i] ] = i;</div><div class="line">    ll res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) res += <span class="number">1l</span>l * (i - pre[i]) * (n - i + <span class="number">1</span>);</div><div class="line">    res = res * <span class="number">2</span> - n;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, <span class="number">1.0</span> *  res / (<span class="number">1l</span>l * n * n));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#&lt;center&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/846/A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;846A. Curriculum Vitae&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="CodeForces" scheme="http://jstztzy.github.io/tags/CodeForces/"/>
    
  </entry>
  
</feed>
