<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rem&#39;s Zone</title>
  <icon>https://www.gravatar.com/avatar/5baa8ae6fa4b185fe675baab98e20b33</icon>
  <subtitle>「好きだ」なんて あぁ 言えたら</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jstztzy.github.io/"/>
  <updated>2017-09-28T02:59:58.380Z</updated>
  <id>http://jstztzy.github.io/</id>
  
  <author>
    <name>jstztzy</name>
    <email>jstztzy@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My Project-Euler Solutions</title>
    <link href="http://jstztzy.github.io/2017/09/28/My-Project-Euler-Solutions/"/>
    <id>http://jstztzy.github.io/2017/09/28/My-Project-Euler-Solutions/</id>
    <published>2017-09-28T02:58:48.000Z</published>
    <updated>2017-09-28T02:59:58.380Z</updated>
    
    <content type="html"><![CDATA[<p>updating…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;updating…&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Project-Euler" scheme="http://jstztzy.github.io/tags/Project-Euler/"/>
    
      <category term="Math" scheme="http://jstztzy.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>2017 ACM/ICPC Asia Regional Urumqi Online（B D待补）</title>
    <link href="http://jstztzy.github.io/2017/09/25/2017-ACM-ICPC-Asia-Regional-Urumqi-Online%EF%BC%88B-D%E5%BE%85%E8%A1%A5%EF%BC%89/"/>
    <id>http://jstztzy.github.io/2017/09/25/2017-ACM-ICPC-Asia-Regional-Urumqi-Online（B-D待补）/</id>
    <published>2017-09-24T16:27:34.000Z</published>
    <updated>2017-09-28T04:49:32.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Banana"><a href="#A-Banana" class="headerlink" title="A. Banana"></a><center><a href="https://nanti.jisuanke.com/t/16950" target="_blank" rel="external">A. Banana</a></center></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$N$个猴子对香蕉喜欢的关系，和$M$个香蕉产自哪个地区的关系。输出所有猴子和地区的关系。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>暴力。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">59</span>;</div><div class="line"><span class="keyword">bool</span> a[N][N], b[N][N], c[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T = read();</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n = read(), m = read();</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> x = read(), y = read();</div><div class="line">            a[x][y] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">int</span> x = read(), y = read();</div><div class="line">            b[x][y] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; j++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; N; k++) &#123;</div><div class="line">                    <span class="keyword">if</span> (a[i][k] &amp;&amp; b[k][j]) c[i][j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (c[i][j]) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="B-Out-of-control-cars"><a href="#B-Out-of-control-cars" class="headerlink" title="B. Out-of-control cars"></a><center><a href="https://nanti.jisuanke.com/t/16951" target="_blank" rel="external">B. Out-of-control cars</a></center></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h1 id="C-Coconut"><a href="#C-Coconut" class="headerlink" title="C. Coconut"></a><center><a href="https://nanti.jisuanke.com/t/16952" target="_blank" rel="external">C. Coconut</a></center></h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>一个人从$1$城依次到$N$城，从$i$城到$i+1$城需要$D_i$天，每天要喝$b$瓶饮料，到达$i$城后又可以获得$C_i$瓶饮料。判断这个人能否每天都喝饮料。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>模拟。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1009</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[N], d[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t = read();</div><div class="line">    <span class="keyword">while</span> (t--) &#123;</div><div class="line">        <span class="keyword">int</span> n = read(), b = read();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i] = read();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) d[i] = read();</div><div class="line">        ll cur = <span class="number">0</span>;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">            cur += c[i];</div><div class="line">            cur -= d[i] * b;</div><div class="line">            <span class="keyword">if</span> (cur &lt; <span class="number">0</span>) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        flag ? <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>) : <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="D-Hack-Portals"><a href="#D-Hack-Portals" class="headerlink" title="D. Hack Portals"></a><center><a href="https://nanti.jisuanke.com/t/16953" target="_blank" rel="external">D. Hack Portals</a></center></h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><h1 id="E-Half-consecutive-Numbers"><a href="#E-Half-consecutive-Numbers" class="headerlink" title="E. Half-consecutive Numbers"></a><center><a href="https://nanti.jisuanke.com/t/16954" target="_blank" rel="external">E. Half-consecutive Numbers</a></center></h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p>给定一个$N$，求最小的$r\geq N$使得$t_r=\frac{1}{2}r(r+1)$是一个平方数。</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>考虑$\frac{1}{2}r(r+1)$是个完全平方数，要么$r=a^2,r+1=2b^2$，要么$r=2a^2,r+1=b^2$。<br>由于$n\leq10^{16}$，故只需要枚举$10^8$以内的$a$即可。</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line">ll r[<span class="number">25</span>] = &#123;</div><div class="line">    <span class="number">0l</span>l,</div><div class="line">    <span class="number">1l</span>l,</div><div class="line">    <span class="number">8l</span>l,</div><div class="line">    <span class="number">49l</span>l,</div><div class="line">    <span class="number">288l</span>l,</div><div class="line">    <span class="number">1681l</span>l,</div><div class="line">    <span class="number">9800l</span>l,</div><div class="line">    <span class="number">57121l</span>l,</div><div class="line">    <span class="number">332928l</span>l,</div><div class="line">    <span class="number">1940449l</span>l,</div><div class="line">    <span class="number">11309768l</span>l,</div><div class="line">    <span class="number">65918161l</span>l,</div><div class="line">    <span class="number">384199200l</span>l,</div><div class="line">    <span class="number">2239277041l</span>l,</div><div class="line">    <span class="number">13051463048l</span>l,</div><div class="line">    <span class="number">76069501249l</span>l,</div><div class="line">    <span class="number">443365544448l</span>l,</div><div class="line">    <span class="number">2584123765441l</span>l,</div><div class="line">    <span class="number">15061377048200l</span>l,</div><div class="line">    <span class="number">87784138523761l</span>l,</div><div class="line">    <span class="number">511643454094368l</span>l,</div><div class="line">    <span class="number">2982076586042449l</span>l,</div><div class="line">    <span class="number">17380816062160328l</span>l,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">    for (ll i = 1; i &lt;= 1e8; i += 2) &#123;</span></div><div class="line"><span class="comment">        if (isSquare((i * i - 1) / 2)) printf("%lld\n", i * i - 1);</span></div><div class="line"><span class="comment">        if (isSquare((i * i + 1) / 2)) printf("%lld\n", i * i);</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    ll T = read();</div><div class="line">    <span class="keyword">for</span> (ll t = <span class="number">1</span>; t &lt;= T; t++) &#123;</div><div class="line">        ll n = read(), i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (; r[i] &lt; n; i++);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%lld: %lld\n"</span>, t, r[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="F-Islands"><a href="#F-Islands" class="headerlink" title="F. Islands"></a><center><a href="https://nanti.jisuanke.com/t/16955" target="_blank" rel="external">F. Islands</a></center></h1><h2 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h2><p>给定一个$N$个点$M$条边的有向图，求最少添加多少条边，使得新图变成强连通图。</p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>首先找出强连通分量，然后把每个强连通分量缩成一个点，这样就得到一个$DAG$。<br>然后设有$a$个节点的入度为$0$，$b$个节点的出度为$0$，则$res=max(a,b)$，因为只要把其中一边连成环即可。<br>注意特殊情况：当原图已经强连通时，答案是$0$而不是$1$！</p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"><span class="keyword">int</span> in0[N], ou0[N];</div><div class="line"><span class="keyword">int</span> pre[N], low[N], scc[N], dfsClock, sccCnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    pre[u] = low[u] = ++dfsClock;</div><div class="line">    s.push(u);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</div><div class="line">        <span class="keyword">if</span> (!pre[v]) &#123;</div><div class="line">            dfs(v);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">if</span> (!scc[v]) low[u] = min(low[u], pre[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (low[u] == pre[u]) &#123;</div><div class="line">        sccCnt++;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> x = s.top(); s.pop();</div><div class="line">            scc[x] = sccCnt;</div><div class="line">            <span class="keyword">if</span> (x == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">findScc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    dfsClock = sccCnt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(scc, <span class="number">0</span>, <span class="keyword">sizeof</span>(scc));</div><div class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span>(low));</div><div class="line">    <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!pre[i]) dfs(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T = read();</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n = read(), m = read();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) g[i].clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">int</span> u = read(), v = read();</div><div class="line">            g[u].push_back(v);</div><div class="line">        &#125;</div><div class="line">        findScc(n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sccCnt; i++) in0[i] = ou0[i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; u++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) &#123;</div><div class="line">                <span class="keyword">if</span> (scc[u] != scc[v]) in0[ scc[v] ] = ou0[ scc[u] ] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sccCnt; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (in0[i]) a++;</div><div class="line">            <span class="keyword">if</span> (ou0[i]) b++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> res = sccCnt == <span class="number">1</span> ? <span class="number">0</span> : max(a, b);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="G-Query-on-a-string"><a href="#G-Query-on-a-string" class="headerlink" title="G. Query on a string"></a><center><a href="https://nanti.jisuanke.com/t/16956" target="_blank" rel="external">G. Query on a string</a></center></h1><h2 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h2><p>给定两个字符串$S$和$T(|T|\leq 10)$，要求在$S$上维护：</p><ol><li>操作$C\space i\space ch$：将$S$的第$i$个字符改成$ch$；</li><li>查询$Q\space i\space j$：返回$S$中第$i$到第$j$位$T$出现的次数。</li></ol><h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><p>首先预处理出$S$中每一位开始连续$|T|$位能否和$T$匹配。<br>对于查询直接输出前缀和即可；<br>对于修改我们用树状数组维护预处理的结果，由于$|T|\leq 10$，修改一位最多影响十位的匹配结果，暴力修改即可。</p><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">char</span> s[N], t[<span class="number">11</span>];</div><div class="line"><span class="keyword">int</span> slen, tlen, bit[<span class="number">2</span> * N];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &amp; (-x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt; N) &#123;</div><div class="line">        bit[x] += y;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">preSum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</div><div class="line">        ret += bit[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">segSum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> preSum(r) - preSum(l - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T = read();</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n = read();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>), slen = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t + <span class="number">1</span>), tlen = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</div><div class="line">        <span class="built_in">memset</span>(bit, <span class="number">0</span>, <span class="keyword">sizeof</span>(bit));</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + tlen - <span class="number">1</span> &lt;= slen; i++) &#123;</div><div class="line">            <span class="keyword">bool</span> flag = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tlen; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (s[i + j - <span class="number">1</span>] != t[j]) &#123;</div><div class="line">                    flag = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (flag) add(i, <span class="number">1</span>), vis[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (n--) &#123;</div><div class="line">            <span class="keyword">char</span> q[<span class="number">5</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, q);</div><div class="line">            <span class="keyword">if</span> (q[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;</div><div class="line">                <span class="keyword">int</span> x = read(), y = read();</div><div class="line">                <span class="keyword">if</span> (y - tlen + <span class="number">1</span> &lt; x) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, segSum(x, y - tlen + <span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (q[<span class="number">0</span>] == <span class="string">'C'</span>) &#123;</div><div class="line">                <span class="keyword">int</span> p = read(); <span class="keyword">char</span> c[<span class="number">5</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, c);</div><div class="line">                s[p] = c[<span class="number">0</span>];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = max(<span class="number">1</span>, p - tlen + <span class="number">1</span>); i &lt;= min(slen - tlen + <span class="number">1</span>, p); i++) &#123;</div><div class="line">                    <span class="keyword">bool</span> flag = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tlen; j++) &#123;</div><div class="line">                        <span class="keyword">if</span> (s[i + j - <span class="number">1</span>] != t[j]) &#123;</div><div class="line">                            flag = <span class="number">0</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (flag != vis[i]) &#123;</div><div class="line">                        <span class="keyword">if</span> (vis[i]) add(i, <span class="number">-1</span>);</div><div class="line">                        <span class="keyword">else</span> add(i, <span class="number">1</span>);</div><div class="line">                        vis[i] = !vis[i];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="H-Skiing"><a href="#H-Skiing" class="headerlink" title="H. Skiing"></a><center><a href="https://nanti.jisuanke.com/t/16957" target="_blank" rel="external">H. Skiing</a></center></h1><h2 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h2><p>求$DAG$上的最长路径。</p><h2 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h2><p>直接跑$SPFA$或者记忆化搜索即可。</p><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> n, m, dist[N];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; g[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(dist, -INF, <span class="keyword">sizeof</span>(dist));</div><div class="line">    q.push(<span class="number">0</span>), vis[<span class="number">0</span>] = <span class="number">1</span>, dist[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop(), vis[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : g[u]) &#123;</div><div class="line">            <span class="keyword">int</span> v = e.first, w = e.second;</div><div class="line">            <span class="keyword">if</span> (dist[u] + w &gt; dist[v]) &#123;</div><div class="line">                dist[v] = dist[u] + w;</div><div class="line">                <span class="keyword">if</span> (!vis[v]) q.push(v), vis[v] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[n + <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t = read();</div><div class="line">    <span class="keyword">while</span> (t--) &#123;</div><div class="line">        n = read(), m = read();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) g[i].clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">int</span> s = read(), t = read(), l = read();</div><div class="line">            g[s].push_back( make_pair(t, l) );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            g[<span class="number">0</span>].push_back( make_pair(i, <span class="number">0</span>) );</div><div class="line">            g[i].push_back( make_pair(n + <span class="number">1</span>, <span class="number">0</span>) );</div><div class="line">        &#125;</div><div class="line">        SPFA();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="I-Colored-Graph"><a href="#I-Colored-Graph" class="headerlink" title="I. Colored Graph"></a><center><a href="https://nanti.jisuanke.com/t/16958" target="_blank" rel="external">I. Colored Graph</a></center></h1><h2 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h2><p>求一种给$n$阶完全图的边$01$染色的方案，使得相同颜色的三元环最少，并求出这个最少数量。</p><h2 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h2><p>我们考虑任意一个含有不同颜色的三元环，一定是两个顶点的两条边颜色不同。<br>记$d_i$为与顶点$i$相连染$1$的边的数量，则相同颜色的三元环有$res=\binom{n}{3}-\frac{1}{2}\sum^{n}_{i=1}{d_i\times (n-1-d_i)}$个。<br>要让它最小，根据均值不等式我们容易得到：当$d_i=\frac{n-1}{2}$时取最小值$\binom{n}{3}-\frac{1}{2}\times n\times \frac{n-1}{2}\times (n-1-\frac{n-1}{2})$。<br>输出方案时，反正是要每个顶点连$\frac{n-1}{2}$条颜色为$1$的边，直接贪心地建图即可。</p><h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">509</span>;</div><div class="line"><span class="keyword">int</span> g[N][N];</div><div class="line">pii v[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T = read();</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n = read();</div><div class="line">        <span class="keyword">int</span> res = n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">6</span> - n * ((n - <span class="number">1</span>) / <span class="number">2</span> * (n - <span class="number">1</span> - (n - <span class="number">1</span>) / <span class="number">2</span>)) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            v[i].first = (n - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">            v[i].second = i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span>(g));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            sort(v + i, v + n + <span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt; max(i, n - v[i].first); j--) &#123;</div><div class="line">                g[ v[i].second ][ v[j].second ] = g[ v[j].second ][ v[i].second ] = <span class="number">1</span>;</div><div class="line">                v[j].first--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, i == j ? <span class="number">0</span> : g[i][j] + <span class="number">1</span>, j == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="J-Our-Journey-of-Dalian-Ends"><a href="#J-Our-Journey-of-Dalian-Ends" class="headerlink" title="J. Our Journey of Dalian Ends"></a><center><a href="https://nanti.jisuanke.com/t/16959" target="_blank" rel="external">J. Our Journey of Dalian Ends</a></center></h1><h2 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h2><p>给定一个无向图，不得重复经过同一顶点，求顶点$A$经过顶点$C$达到顶点$B$的最短路径。</p><h2 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h2><p>我们先把超级源连$A$和$B$，超级汇连$C$。<br>然后每个顶点拆成一个入点、一个出点，之间连一条容量为$1$、费用为$0$的边（注意：顶点$C$拆成的边容量为$2$）。<br>最后直接跑最小费用最大流。若到超级汇的流量不为$2$，则不存在这样的路径，否则输出最小费用即可。</p><h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> ll N = <span class="number">2e4</span>;</div><div class="line"><span class="keyword">const</span> ll M = <span class="number">2e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> s1 = <span class="string">"Dalian"</span>;</div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> s2 = <span class="string">"Xian"</span>;</div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> s3 = <span class="string">"Shanghai"</span>;</div><div class="line">ll n, m;</div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, ll&gt; hsh;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MCMF</span> &#123;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></div><div class="line">        ll fr, to, cap, flw, cst, nxt;</div><div class="line">        Edge() &#123;&#125;</div><div class="line">        Edge(ll fr, ll to, ll cap, ll flw, ll cst, ll nxt) &#123;</div><div class="line">            <span class="keyword">this</span>-&gt;fr = fr; <span class="keyword">this</span>-&gt;to = to; <span class="keyword">this</span>-&gt;cap = cap; <span class="keyword">this</span>-&gt;flw = flw; <span class="keyword">this</span>-&gt;cst = cst; <span class="keyword">this</span>-&gt;nxt = nxt;</div><div class="line">        &#125;</div><div class="line">    &#125; e[M];</div><div class="line"></div><div class="line">    ll n, m, s, t, tot;</div><div class="line">    ll hed[M], dst[M], vis[M], pre[M], cag[M];</div><div class="line">    <span class="built_in">queue</span>&lt;ll&gt; q;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        tot = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (ll i = s; i &lt;= t; i++) hed[i] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x, ll y, ll v, ll c)</span> </span>&#123;</div><div class="line">        e[tot] = Edge(x, y, v, <span class="number">0</span>, c, hed[x]); hed[x] = tot++;</div><div class="line">        e[tot] = Edge(y, x, <span class="number">0</span>, <span class="number">0</span>, -c, hed[y]); hed[y] = tot++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(ll&amp; flow, ll&amp; cost)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (ll i = s; i &lt;= t; i++) dst[i] = INF, vis[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!q.empty()) q.pop();</div><div class="line">        q.push(s); dst[s] = <span class="number">0</span>; vis[s] = <span class="number">1</span>; pre[s] = <span class="number">0</span>; cag[s] = INF;</div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            ll u = q.front(); q.pop(); vis[u] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (ll i = hed[u]; ~i; i = e[i].nxt) &#123;</div><div class="line">                Edge&amp; edge = e[i];</div><div class="line">                <span class="keyword">if</span> (edge.cap &gt; edge.flw &amp;&amp; dst[edge.to] &gt; dst[u] + edge.cst) &#123;</div><div class="line">                    dst[edge.to] = dst[u] + edge.cst;</div><div class="line">                    pre[edge.to] = i;</div><div class="line">                    cag[edge.to] = min(cag[u], edge.cap - edge.flw);</div><div class="line">                    <span class="keyword">if</span> (!vis[edge.to]) q.push(edge.to), vis[edge.to] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dst[t] == INF) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        flow += cag[t];</div><div class="line">        cost += dst[t] * cag[t];</div><div class="line">        ll u = t;</div><div class="line">        <span class="keyword">while</span> (u != s) &#123;</div><div class="line">            e[ pre[u] ].flw += cag[t];</div><div class="line">            e[ pre[u] ^ <span class="number">1</span> ].flw -= cag[t];</div><div class="line">            u = e[ pre[u] ].fr;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function">ll <span class="title">minCost</span><span class="params">()</span> </span>&#123;</div><div class="line">        ll flow = <span class="number">0</span>, cost = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (SPFA(flow, cost));</div><div class="line">        <span class="keyword">return</span> flow != <span class="number">2</span> ? <span class="number">-1</span> : cost;</div><div class="line">    &#125;</div><div class="line">&#125; mcmf;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll T = read();</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        n = <span class="number">0</span>, m = read(); hsh.clear();</div><div class="line">        mcmf.n = <span class="number">2</span> * N + <span class="number">2</span>; mcmf.s = <span class="number">0</span>; mcmf.t = <span class="number">2</span> * N + <span class="number">1</span>; mcmf.init();</div><div class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="built_in">string</span> u, v; <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v; </div><div class="line">            ll c = read();</div><div class="line">            <span class="keyword">if</span> (hsh[u] == <span class="number">0</span>) &#123;</div><div class="line">                hsh[u] = ++n;</div><div class="line">                <span class="keyword">if</span> (u != s3) mcmf.add(hsh[u], hsh[u] + N, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (hsh[v] == <span class="number">0</span>) &#123;</div><div class="line">                hsh[v] = ++n;</div><div class="line">                <span class="keyword">if</span> (v != s3) mcmf.add(hsh[v], hsh[v] + N, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (u == s3) mcmf.add(hsh[u], hsh[v], <span class="number">1</span>, c);</div><div class="line">            <span class="keyword">else</span> mcmf.add(hsh[u] + N, hsh[v], <span class="number">1</span>, c);</div><div class="line">            <span class="keyword">if</span> (v == s3) mcmf.add(hsh[v], hsh[u], <span class="number">1</span>, c);</div><div class="line">            <span class="keyword">else</span> mcmf.add(hsh[v] + N, hsh[u], <span class="number">1</span>, c);</div><div class="line">        &#125;</div><div class="line">        mcmf.add(mcmf.s, hsh[s3], <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">        mcmf.add(hsh[s2] + N, mcmf.t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        mcmf.add(hsh[s1] + N, mcmf.t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, mcmf.minCost());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-Banana&quot;&gt;&lt;a href=&quot;#A-Banana&quot; class=&quot;headerlink&quot; title=&quot;A. Banana&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/16950&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="ACM/ICPC" scheme="http://jstztzy.github.io/tags/ACM-ICPC/"/>
    
      <category term="Contest" scheme="http://jstztzy.github.io/tags/Contest/"/>
    
  </entry>
  
  <entry>
    <title>线性基学习笔记</title>
    <link href="http://jstztzy.github.io/2017/09/25/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://jstztzy.github.io/2017/09/25/线性基学习笔记/</id>
    <published>2017-09-24T16:24:58.000Z</published>
    <updated>2017-09-28T04:47:10.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li>本文是博主学习线性基时的笔记，主要参考了<a href="https://blog.sengxian.com/algorithms/linear-basis" target="_blank" rel="external"><strong>sengxian</strong></a>、<a href="https://oi.men.ci/linear-basis-notes/" target="_blank" rel="external"><strong>menci</strong></a>和<a href="http://www.cnblogs.com/ljh2000-jump/p/5869991.html" target="_blank" rel="external"><strong>ljh2000</strong></a>的博客，并加入了一些本人的思考。转载请注明出处。</li></ul><h1 id="概念引入"><a href="#概念引入" class="headerlink" title="概念引入"></a>概念引入</h1><ul><li>在线性代数中，<strong>基</strong>$(basis)$是用来描述向量空间的基本工具。在$OI/ACM$中的题目中，利用基在<strong>异或空间</strong>中的特殊性质来解决问题，这类问题被称为<strong>线性基</strong>。  </li></ul><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="向量空间"><a href="#向量空间" class="headerlink" title="向量空间"></a>向量空间</h2><ul><li><strong>向量空间( vector space )</strong>$(F,V,+,\cdot )$，其中：$F$为域，$V$为集合，$V$中元素称为向量，$+$为向量加法，$\cdot $为标量乘法，且运算满足$8$条公理。</li></ul><h2 id="线性相关-amp-线性无关"><a href="#线性相关-amp-线性无关" class="headerlink" title="线性相关&amp;线性无关"></a>线性相关&amp;线性无关</h2><ul><li>对于向量空间中$V$上$n$个元素的向量组$(\vec{v_1}, \vec{v_2}, …, \vec{v_n})$，若存在不全为$0$的$n$个数$a_i \in F$,满足 $\sum_{i=1}^{n} a_i\vec {v_i} = a_1\vec {v_1}+a_2\vec{v_2}+\dots+a_n\vec{v_n}=\vec{0}$，则称这$n$个向量<strong>线性相关( linearly dependent )</strong>，否则称为<strong>线性无关( linearly independent )</strong>。  </li></ul><h2 id="线性组合"><a href="#线性组合" class="headerlink" title="线性组合"></a>线性组合</h2><ul><li><strong>线性组合( linear combination )</strong>即判断线性相关时的那个和式。换句话说，一组向量线性无关$\Leftrightarrow $其中任意向量都不能用其他向量的线性组合表示。  </li></ul><h2 id="张成"><a href="#张成" class="headerlink" title="张成"></a>张成</h2><ul><li>对于向量空间中$V$上$n$个元素的向量组$(\vec{v_1}, \vec{v_2}, …, \vec{v_n})$，其所有线性组合所构成的集合称为$(\vec{v_1}, \vec{v_2}, …, \vec{v_n})$的<strong>张成( span )</strong>，记为$span(\vec{v_1}, \vec{v_2}, …, \vec{v_n})$。  </li></ul><h2 id="基"><a href="#基" class="headerlink" title="基"></a>基</h2><ul><li>若向量空间中$V$中的向量组$B$既线性无关，又可以张成$V$，则称为$V$的<strong>基( basis )</strong>。其中：$B$中元素称为<strong>基向量</strong>，若基中元素个数有限，则称该向量空间为<strong>有限向量空间</strong>，基元素个数为该向量空间的<strong>维度</strong>。  </li></ul><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>若$B$是向量空间中$V$的基，则$B$具有以下性质：  <ol><li>$B$是极小的能张成$V$的集合，它的任何真子集都不可能再是基；  </li><li>$V$中任意元素都可以<strong>唯一</strong>表示为$B$中若干元素的线性组合。  </li></ol></li></ul><h1 id="OI-ACM中的线性基"><a href="#OI-ACM中的线性基" class="headerlink" title="OI/ACM中的线性基"></a>OI/ACM中的线性基</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>在$OI/ACM$中的线性基通常特指<strong>异或运算</strong>下的基，即：<br>对于数$a_1, a_2, …, a_n$，把$a_i$表示成二进制${(b_m b_{m-1} … b_1)}_2$并看作一个向量$\vec{a_i}=(b_m,b_{m-1},…,b_1)$。由向量组$a_1,a_2,…,a_n$的张成，加上异或运算和乘法运算，便形成了一个向量空间$V=(\{0,1 \}, span(\vec{a_1},\vec{a_2},…,\vec{a_n}),\otimes,\cdot)$。下面我们要求的线性基就是这个向量空间$V$的基。</li><li>为简化，我们称该集合为$S$，其中最大数在二进制下有$L$位，用一个$[0…L]$的数组$a$来储存线性基。</li></ul><h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><ol><li>线性基的异或集合中不存在$0$。</li><li>线性基的异或集合中每个元素的异或方案唯一。</li><li>线性基中每个数二进制最高位互不相同。</li><li>线性基的异或集合为$[1,2^L-1]$。</li><li>线性基矩阵的半三角性：<ul><li>若$a_i$的第$i$位为$0$，则只有满足$j&gt;i$的$a_j$的第$i$位可能为$1$；  </li><li>若$a_i$的第$i$位为$1$，则$a_i$更高的二进制位都为$0$。  </li></ul></li></ol><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ul><li>逆序枚举$t$中所有为$1$的二进制位$j=L\rightarrow 0$：  <ul><li>若$a_j \neq 0$，则令$t=t \otimes a_j$；</li><li>若$a_j = 0$，则：<ul><li>枚举$k \in [0,j)$，若$t$的第$k$位为$1$，则令$t=t \otimes a_k$</li><li>枚举$k \in (j,L]$，若$a_k$的第$j$位为$1$，则令$a_k=a_k \otimes t$</li></ul></li></ul></li><li>令$a_j=t$，结束。</li><li>时间复杂度：$\Theta (log\space t)$。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span> &#123;</span></div><div class="line">    ll a[L + <span class="number">1</span>];</div><div class="line">    LinearBasis() &#123;</div><div class="line">        <span class="built_in">std</span>::fill(a, a + L + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll t)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (!(t &amp; (<span class="number">1l</span>l &lt;&lt; j))) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (a[j]) t ^= a[j];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; k++) <span class="keyword">if</span> (t &amp; (<span class="number">1l</span>l &lt;&lt; k)) t ^= a[k];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= L; k++) <span class="keyword">if</span> (a[k] &amp; (<span class="number">1l</span>l &lt;&lt; j)) a[k] ^= t;</div><div class="line">                a[j] = t;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ul><li>两个线性基合并的过程就是将一个线性基暴力插入另一个线性基。</li><li>代码如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeFrom</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;other)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= L; i++) insert(other.a[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>最大值： 即所有线性基的异或和。  </li><li>最小值： 即最低位的线性基。</li></ul><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ol><li><p>SGU275 最大异或和</p><ul><li>题意：给定$n(1\leq n \leq 10^5)$个数，求它们的异或和最大是多少。</li><li>分析：求出这$n$个数的线性基，答案是将所有线性基中所有数异或起来。  </li></ul></li><li><p>HDU3949 子集$k$大异或和</p><ul><li>题意：给定$n(1\leq n \leq 10^4)$个数和$q(1\leq q \leq 10^4)$个询问$k$，每次求所有异或和中第$k$小的数。</li><li>分析：根据线性基的性质，任意非空子集的异或和都不重复。假设线性基$m$个数中第$0…m$位为$1$的数依次为$(a_0,a_1,…,a_m)$，$k={(b<em>xb</em>{x-1}…b_0)}_2$，不难用二进制的思想证明最终结果为$\otimes_{0\leq i\leq x}b_i\cdot a_i$。  </li></ul></li><li><p>BZOJ2115 最大路径异或和</p><ul><li>题意：给定$n(1\leq n \leq 50000)$个点$m(1\leq m \leq 10000)$条边的无向图，求一条从顶点$1$到$n$的路径（可重复经过点和边），使得路径上边权的异或和最大。</li><li>分析：首先有一个常用技巧——任意一条$1$到$n$的路径的异或和，都可以由任意一条$1$到$n$的路径的异或和与图中一些环的异或和组合得到。然后通过$DFS$找到图中所有的环，和任意一条$1$到$n$的路径（异或值为$s$），我们的问题就变成了选择若干环，使得这些环的异或值与$s$异或起来最大。这就转化成了最大异或和问题。</li></ul></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>大多情况下，在$OI/ACM$中有关<strong>异或</strong>运算求最值/求和的问题，一般都会用到线性基。如果给定很多数，我们通过构造它们的线性基，通过互相之间异或，生成原来所有数的异或和集合，从而大大减少判断的时间和次数。</li><li>然后线性基和图论综合起来的话，常用的技巧就是：<ul><li>任意一条$1$到$n$的路径的异或和，都可以由任意一条$1$到$n$的路径的异或和与图中一些环的异或和组合得到。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文是博主学习线性基时的笔记，主要参考了&lt;a href=&quot;https://blog.sengxian.com/a
      
    
    </summary>
    
    
      <category term="Note" scheme="http://jstztzy.github.io/tags/Note/"/>
    
      <category term="线性基" scheme="http://jstztzy.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #432(Div.2)</title>
    <link href="http://jstztzy.github.io/2017/09/25/Codeforces-Round-432-Div-2/"/>
    <id>http://jstztzy.github.io/2017/09/25/Codeforces-Round-432-Div-2/</id>
    <published>2017-09-24T16:17:00.000Z</published>
    <updated>2017-09-24T16:19:57.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Arpa-and-a-research-in-Mexican-wave"><a href="#A-Arpa-and-a-research-in-Mexican-wave" class="headerlink" title="A. Arpa and a research in Mexican wave"></a><center><a href="http://codeforces.com/contest/851/problem/A" target="_blank" rel="external">A. Arpa and a research in Mexican wave</a></center></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>分段函数求值。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>$\begin{equation}<br>  f(t)=<br>  \begin{cases}<br>  t&amp;,0\leq t\leq k\newline<br>  k&amp;,k&lt; t\leq n\newline<br>  n+k-t&amp;,b&lt; t\leq n+k<br>  \end{cases}<br>\end{equation}$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n, k, t;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; t;</div><div class="line">    <span class="keyword">if</span> (t &lt;= k) <span class="built_in">cout</span> &lt;&lt; t;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">if</span> (t &lt;= n) <span class="built_in">cout</span> &lt;&lt; k;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; k - (t - n);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="B-Arpa-and-an-exam-about-geometry"><a href="#B-Arpa-and-an-exam-about-geometry" class="headerlink" title="B. Arpa and an exam about geometry"></a><center><a href="http://codeforces.com/contest/851/problem/B" target="_blank" rel="external">B. Arpa and an exam about geometry</a></center></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定三个点$a,b,c$，判断能否通过旋转使得$a$和$b$重合，$b$和$c$重合。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>题述可行当且仅当$|ab|=|bc|$且$a,b,c$三点不共线。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dist</span><span class="params">(Point p, Point q)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sqr(p.x - q.x) + sqr(p.y - q.y);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    Point a, b, c;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; a.x &gt;&gt; a.y &gt;&gt; b.x &gt;&gt; b.y &gt;&gt; c.x &gt;&gt; c.y;</div><div class="line">    <span class="keyword">if</span> ((a.x - b.x) * (b.y - c.y) == (a.y - b.y) * (b.x - c.x) || dist(a, b) != dist(b, c)) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"No"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="C-Five-Dimensional-Points"><a href="#C-Five-Dimensional-Points" class="headerlink" title="C. Five Dimensional Points"></a><center><a href="http://codeforces.com/contest/851/problem/C" target="_blank" rel="external">C. Five Dimensional Points</a></center></h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定$N$个五维点$(a_i,b_i,c_i,d_i,e_i)$。求所有“坏点”，即存在其他两个点与它构成的向量张角为锐角的点。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>我们先考虑二维时，一个点若不是“坏点”，则周围最多$4$个点；三维时，是$6$个；以此类推，五维时，是$10$个。<br>因此：当$N&gt;11$时，全部都是“坏点”；$N\leq 11$时，$N^3$枚举一下即可。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1009</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">     <span class="keyword">int</span> a, b, c, d, e;</div><div class="line"> &#125; p[N];</div><div class="line"><span class="keyword">int</span> res[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isBad</span><span class="params">(Point x, Point y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x.a * y.a + x.b * y.b + x.c * y.c + x.d * y.d + x.e * y.e &gt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i].a = read(), p[i].b = read(), p[i].c = read(), p[i].d = read(), p[i].e = read();</div><div class="line">    <span class="keyword">if</span> (n &gt; <span class="number">11</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) <span class="keyword">if</span> (i != j) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= n; k++) <span class="keyword">if</span> (k != j &amp;&amp; k != i) &#123;</div><div class="line">                Point ab, ac;</div><div class="line">                ab.a = p[i].a - p[j].a; ab.b = p[i].b - p[j].b; ab.c = p[i].c - p[j].c; ab.d = p[i].d - p[j].d; ab.e = p[i].e - p[j].e;</div><div class="line">                ac.a = p[i].a - p[k].a; ac.b = p[i].b - p[k].b; ac.c = p[i].c - p[k].c; ac.d = p[i].d - p[k].d; ac.e = p[i].e - p[k].e;</div><div class="line">                <span class="keyword">if</span> (isBad(ab, ac)) flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag) res[k++] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, res[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="D-Arpa-and-a-list-of-numbers"><a href="#D-Arpa-and-a-list-of-numbers" class="headerlink" title="D. Arpa and a list of numbers"></a><center><a href="http://codeforces.com/contest/851/problem/D" target="_blank" rel="external">D. Arpa and a list of numbers</a></center></h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个数$a_i$和两种操作：<br>$1.$花费$x$将一个数删除；<br>$2.$花费$y$将一个数加一。<br>两种操作使用次数任意，求最小花费使得最后所有数的$gcd$不为$1$或全部删除。</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>首先我们考虑枚举最后所有数的$gcd$，时间复杂度为$\Theta(m)$，其中$m=max_{1\leq i\leq n}(a_i)$。<br>然后考虑对于每个$gcd$计算对应花费，暴力枚举要再乘上$\Theta(n)$肯定超时，而运用<strong>前缀和</strong>就可以做到整体复杂度为$\Theta(mlnm)$（调和级数求和）。<br>对于一个$gcd$，会将正整数划分成若干区间$[(k-1)\times gcd+1,k\times gcd]$。对于区间中的一个数$num$，使用操作$2$变成$k\times gcd$，需要的花费为$(k\times gcd-num)\times y$；使用操作$1$则需要花费为$x$。很显然，我们可以列出一个方程：$(k\times gcd-num)\times y=x$。解得：$num=k\times gcd-\frac{y}{x}$。这个解（设$bound=k\times gcd-\left \lfloor \frac{y}{x}\right \rfloor$）如果在区间里的话，小于等于$bound$的数全部用操作$1$删去，大于$bound$的数全部用操作$2$变成$k\times gcd$；如果不在区间里的话，就全部删掉。<br>也就是说每个区间被划分了至多两个连续区间，那么我们只要用前缀和预处理一下即可。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> ll N = <span class="number">5e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> ll M = <span class="number">1e6</span>+<span class="number">9</span>;</div><div class="line">ll a[N], p[M], cnt[<span class="number">2</span> * M], sum[<span class="number">2</span> * M];</div><div class="line"><span class="keyword">bool</span> isPrime[M];</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">seizePrime</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; M; i++) isPrime[i] = <span class="number">1</span>;</div><div class="line">    isPrime[<span class="number">0</span>] = isPrime[<span class="number">1</span>] = <span class="number">0</span>; p[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt; M; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</div><div class="line">            p[ ++p[<span class="number">0</span>] ] = i;</div><div class="line">            <span class="keyword">for</span> (ll j = <span class="number">2</span> * i; j &lt; M; j += i) isPrime[j] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll n = read(), x = read(), y = read();</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        a[i] = read();</div><div class="line">        cnt[ a[i] ] ++;</div><div class="line">        sum[ a[i] ] += a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; <span class="number">2</span> * M; i++) &#123;</div><div class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">        sum[i] += sum[i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    seizePrime();</div><div class="line">    ll res = x * n;</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= p[<span class="number">0</span>]; i++) &#123;</div><div class="line">        ll g = p[i], tmp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (ll k = g; k &lt; <span class="number">2</span> * M; k += g) &#123;</div><div class="line">            <span class="keyword">if</span> (k - x / y &gt; k - g + <span class="number">1</span>) tmp += (cnt[k - x / y - <span class="number">1</span>] - cnt[k - g]) * x;</div><div class="line">            ll b = max(k - x / y, k - g + <span class="number">1</span>);</div><div class="line">            tmp += ((cnt[k - <span class="number">1</span>] - cnt[b - <span class="number">1</span>]) * k - (sum[k - <span class="number">1</span>] - sum[b - <span class="number">1</span>])) * y;</div><div class="line">        &#125;</div><div class="line">        res = min(res, tmp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="E-Arpa-and-a-game-with-Mojtaba"><a href="#E-Arpa-and-a-game-with-Mojtaba" class="headerlink" title="E. Arpa and a game with Mojtaba"></a><center><a href="http://codeforces.com/contest/851/problem/E" target="_blank" rel="external">E. Arpa and a game with Mojtaba</a></center></h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个数$a_i$，两个人轮流玩游戏，每人每轮操作任选一个素数$p$和一个正整数$k$，将$n$个数中可以整除$p^k$的数除以$p^k$。当且仅当一个人无法操作时，他就输了。判断谁有必胜策略。</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>由于每个素数之间相互独立，我们对每个素数单独考虑，求出所有素数的$SG$值异或起来即可。<br>下面，我们考虑如何对一个素数$p$求$SG$值。<br>首先，用一个二进制数$mask$表示一个状态：第$i$位为$1$当且仅当该状态下存在数能够整除$p^i$且不能$p^{i+1}$整除。<br>然后，当一个人选择了$k$时，就把$mask$大于等于$k$的位和原来的$mask$小于$k$的位进行或运算。即$mask$的下一个状态为$(mask&gt;&gt;k)\cup (mask\cap ((1&lt;&lt;k)-1))$。<br>最后，我们在按上述方式构造出的图上$DFS$就能计算出每个素数的$SG$值。</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">109</span>;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mask, sg;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">2</span>; p * p &lt;= a; p++) &#123;</div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (a % p == <span class="number">0</span>) a /= p, k++;</div><div class="line">        <span class="keyword">if</span> (k &gt; <span class="number">0</span>) mask[p] |= (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a &gt; <span class="number">1</span>) mask[a] |= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getSG</span><span class="params">(<span class="keyword">int</span> msk)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sg.count(msk)) <span class="keyword">return</span> sg[msk];</div><div class="line">    <span class="keyword">int</span> bit1 = <span class="number">0</span>, bit[<span class="number">32</span>];</div><div class="line">    <span class="built_in">memset</span>(bit, <span class="number">0</span>, <span class="keyword">sizeof</span>(bit));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; k) &lt;= msk; k++) &#123;</div><div class="line">        bit[ getSG((msk &amp; bit1) | (msk &gt;&gt; (k + <span class="number">1</span>)))] = <span class="number">1</span>;</div><div class="line">        bit1 |= (<span class="number">1</span> &lt;&lt; k);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (bit[k]) k++;</div><div class="line">    <span class="keyword">return</span> sg[msk] = k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> a = read(); calc(a);</div><div class="line">    &#125;</div><div class="line">    ll res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> pir : mask) res ^= getSG(pir.second);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(res == <span class="number">0</span> ? <span class="string">"Arpa"</span> : <span class="string">"Mojtaba"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-Arpa-and-a-research-in-Mexican-wave&quot;&gt;&lt;a href=&quot;#A-Arpa-and-a-research-in-Mexican-wave&quot; class=&quot;headerlink&quot; title=&quot;A. Arpa and a rese
      
    
    </summary>
    
    
      <category term="CodeForces" scheme="http://jstztzy.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3211 花神游历各国</title>
    <link href="http://jstztzy.github.io/2017/09/25/BZOJ3211-%E8%8A%B1%E7%A5%9E%E6%B8%B8%E5%8E%86%E5%90%84%E5%9B%BD/"/>
    <id>http://jstztzy.github.io/2017/09/25/BZOJ3211-花神游历各国/</id>
    <published>2017-09-24T16:12:49.000Z</published>
    <updated>2017-09-24T16:23:53.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BZOJ3211-花神游历各国"><a href="#BZOJ3211-花神游历各国" class="headerlink" title="BZOJ3211: 花神游历各国"></a><center><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3211" target="_blank" rel="external">BZOJ3211: 花神游历各国</a></center></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个数，$m$个操作，一种查询区间内所有数的和，一种将区间内所有数开根后取整。输出所有查询的结果。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>线段树。唯一的$trick$是由于这$n$个数的范围是$[0,10^9]$，最多开$5$次根就会达到$0$，于是我们开一个$cnt$数组记录一段区间是否需要继续开根即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson root &lt;&lt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson root &lt;&lt; 1 | 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ltree lson, l, m</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rtree rson, m + 1, r</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"></div><div class="line">ll data[N], sum[<span class="number">4</span> * N], cnt[<span class="number">4</span> * N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        sum[root] = data[l], cnt[root] = (data[l] &lt;= <span class="number">1</span>); <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(ltree);</div><div class="line">    build(rtree);</div><div class="line">    sum[root] = sum[lson] + sum[rson];</div><div class="line">    cnt[root] = cnt[lson] + cnt[rson];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> sum[root];</div><div class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    ll ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (ql &lt;= m) ret += query(ltree, ql, qr);</div><div class="line">    <span class="keyword">if</span> (qr &gt; m) ret += query(rtree, ql, qr);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (cnt[root] == r - l + <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        sum[root] = (ll) <span class="built_in">sqrt</span>(sum[root]), cnt[root] = (sum[root] &lt;= <span class="number">1</span>); <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (ql &lt;= m) update(ltree, ql, qr);</div><div class="line">    <span class="keyword">if</span> (qr &gt; m) update(rtree, ql, qr);</div><div class="line">    sum[root] = sum[lson] + sum[rson];</div><div class="line">    cnt[root] = cnt[lson] + cnt[rson];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) data[i] = read();</div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> m = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x = read(), l = read(), r = read();</div><div class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, l, r));</div><div class="line">        <span class="keyword">if</span> (x == <span class="number">2</span>) update(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BZOJ3211-花神游历各国&quot;&gt;&lt;a href=&quot;#BZOJ3211-花神游历各国&quot; class=&quot;headerlink&quot; title=&quot;BZOJ3211: 花神游历各国&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;a href=&quot;http://www.lydsy.com/Ju
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://jstztzy.github.io/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://jstztzy.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #428(Div.2)</title>
    <link href="http://jstztzy.github.io/2017/09/25/Codeforces-Round-428/"/>
    <id>http://jstztzy.github.io/2017/09/25/Codeforces-Round-428/</id>
    <published>2017-09-24T16:08:51.000Z</published>
    <updated>2017-09-28T04:55:55.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Arya-and-Bran"><a href="#A-Arya-and-Bran" class="headerlink" title="A. Arya and Bran"></a><center><a href="http://codeforces.com/contest/839/problem/A" target="_blank" rel="external">A. Arya and Bran</a></center></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>已知$n$天中一个人每天获得$a_i$块糖，但最多只能拿其中8块，多余的可以以后拿。判断最早哪一天能拿到$k$块。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>模拟每天的情况即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), k = read(), rst = <span class="number">0</span>; </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> ai = read();</div><div class="line">        <span class="keyword">int</span> dec = min(ai + rst, <span class="number">8</span>);</div><div class="line">        rst += (ai - dec);</div><div class="line">        k -= dec;</div><div class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="B-Game-of-the-Rows"><a href="#B-Game-of-the-Rows" class="headerlink" title="B. Game of the Rows"></a><center><a href="http://codeforces.com/contest/839/problem/B" target="_blank" rel="external">B. Game of the Rows</a></center></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>已知飞机上有$n$座位，每排编号1~8号座位，其中1和2、3和4、4和5、5和6、7和8相邻；另有$k$队士兵，每队$a_i$人，规定不同部队的士兵不能坐相邻座位。判断飞机能否载走所有士兵。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>贪心。首先考虑大于等于3人队，优先把他们往3456位或12、78位上塞；再考虑两人队，优先塞到12、78位，塞不下则看成三人队塞到3456位，还塞不下则看成两个一人队；最后考虑一人队即可。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), k = read();</div><div class="line">    <span class="keyword">int</span> cnt[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> rst[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span> * n, <span class="number">0</span>, n&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</div><div class="line">        <span class="keyword">int</span> a = read();</div><div class="line">        <span class="keyword">while</span> (a &gt;= <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (rst[<span class="number">4</span>] &gt; <span class="number">0</span>) a -= <span class="number">4</span>, rst[<span class="number">4</span>]--;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">if</span> (rst[<span class="number">2</span>] &gt; <span class="number">0</span>) a -= <span class="number">2</span>, rst[<span class="number">2</span>]--;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        &#125;</div><div class="line">        cnt[a]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (cnt[<span class="number">2</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (rst[<span class="number">2</span>] &gt; <span class="number">0</span>) cnt[<span class="number">2</span>]--, rst[<span class="number">2</span>]--;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="keyword">if</span> (rst[<span class="number">4</span>] &gt; <span class="number">0</span>) cnt[<span class="number">2</span>]--, rst[<span class="number">4</span>]--, rst[<span class="number">1</span>]++;</div><div class="line">            <span class="keyword">else</span> cnt[<span class="number">2</span>]--, cnt[<span class="number">1</span>] += <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (cnt[<span class="number">1</span>] &gt; rst[<span class="number">1</span>] + rst[<span class="number">2</span>] + rst[<span class="number">4</span>] * <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="C-Journey"><a href="#C-Journey" class="headerlink" title="C. Journey"></a><center><a href="http://codeforces.com/contest/839/problem/C" target="_blank" rel="external">C. Journey</a></center></h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>已知一棵树，求从编号为1的根节点到达叶子节点距离的期望。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>直接遍历这棵树，记录每个节点的深度和到达它的概率，每到一个叶子结点累加它的深度$\times$概率即可。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> res = <span class="number">0.0</span>;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">double</span> d, <span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; <span class="keyword">double</span> y = <span class="number">0.0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v: g[u]) <span class="keyword">if</span> (!vis[v]) q.push(v), y++;</div><div class="line">    <span class="keyword">if</span> (q.empty()) res += d * x;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            <span class="keyword">int</span> v = q.front(); q.pop();</div><div class="line">            vis[v] = <span class="number">1</span>;</div><div class="line">            dfs(v, d + <span class="number">1</span>, x / y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> u = read(), v = read();</div><div class="line">        g[u].push_back(v); g[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis)); vis[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%.8lf\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="D-Winter-is-here"><a href="#D-Winter-is-here" class="headerlink" title="D. Winter is here"></a><center><a href="http://codeforces.com/contest/839/problem/D" target="_blank" rel="external">D. Winter is here</a></center></h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>已知$n$个数$a_1,a_2,…,a_n$,对于任意$k$个数的子集，若$i_1$ $&lt;$ $i_2&lt;…&lt;$$i_k且gcd(a_{i_1},a_{i_2},…,a_{i_k})&gt;1$，则这个子集的“力量”为$k\times gcd(a_{i_1},a_{i_2},…,a_{i_k})$。求所有子集的“力量”之和。</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>直接考虑子集的最大公约数是多少然后统计时间复杂度显然很高，我们考虑一个数$i$整除子集中的所有数，那$i$一定整除子集的最大公约数，于是我们先统计能被$i$整除的子集个数。<br>假设$n$个数中能被$i$整除的个数为$x$，则能被$i$整除的子集个数$b_i=\sum_{k=0}^x k\times {\binom{x}{k}}=x\times \sum_{k=0}^{x-1} {\binom{x-1}{k}}=x\times {2^{x-1}}$，再根据$b_i$倒过来使用容斥原理求和即可。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> ll N = <span class="number">1e6</span>+<span class="number">9</span>, Q = <span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"></div><div class="line">ll res, a[N], b[N], p[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll n = read();</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; i++) &#123;ll x = read(); a[x]++;&#125;</div><div class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p)), p[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) p[i] = <span class="number">2</span> * p[i - <span class="number">1</span>] % Q;</div><div class="line">    <span class="keyword">for</span> (ll i = N - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--) &#123;</div><div class="line">        ll x = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (ll j = i; j &lt; N; j += i) x += a[j];</div><div class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</div><div class="line">            b[i] = x * p[x - <span class="number">1</span>] % Q;</div><div class="line">            <span class="keyword">for</span> (ll j = i * <span class="number">2</span>; j &lt; N; j += i) b[i] = (b[i] - b[j] + Q) % Q;</div><div class="line">            res += b[i] * i; res %= Q;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="E-Mother-of-Dragons"><a href="#E-Mother-of-Dragons" class="headerlink" title="E. Mother of Dragons"></a><center><a href="http://codeforces.com/contest/839/problem/E" target="_blank" rel="external">E. Mother of Dragons</a></center></h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p>已知$n$个顶点的图和k，要求将$k$分配给各个顶点（可以为$0$），当两个顶点有边直接相连时将产生它们乘积的价值，求一个分配方案使得产生的乘积之和最大。</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>最优解一定是将$k$平均分配给图中的一个最大团。简单证明如下：<br>首先对于两个顶点，由均值不等式，平均分配时产生的乘积最大，由此容易证到：对于团也是平均分配时的乘积和最大。<br>假设将$k$分配给一个顶点个数为$c$的团，则产生的乘积之和为$s=(\frac{k}{c})^{2}\times \frac{c(c-1)}{2}=\frac{k^2(c-1)}{2c}$。<br>现在有一个不属于该团的顶点$P$，它与团中顶点最多有$c-1$条边，则平均分配这$c+1$个顶点产生的乘积之和最大为$s’=(\frac{k}{c+1})^{2}\times(\frac{c(c-1)}{2}+(c-1))=\frac{k^2(c+2)(c-1)}{2(c+1)^2}$。<br>简单做差，可以推到$s&gt;s’$。<br>即：$(1)$对于一个团，不要额外添加不属于它的顶点。<br>假设除了这个顶点个数为$c$的团之外，还有$m$个顶点数最多为$c$的团，则产生的乘积之和为$s’’=\sum_{i=1}^m(\frac{k}{\sum_{i=1}^{m}c_i})^{2}\times \frac{c(c-1)}{2}=(\frac{k}{\sum_{i=1}^{m}c_i})^{2}\times \sum_{i=1}^m\frac{c_i(c_i-1)}{2}\leq (\frac{k}{\sum_{i=1}^{m}c_i})^{2}\times \frac{c(c-1)}{2}$。<br>简单做差，可以推到$s\geq s’’$。<br>即：$(2)$对于多个团，只要选其中的一个最大团。<br>根据$(1)(2)$得证。<br>最后找最大团可以通过$BronKerbosch$算法或者$dp$或者启发式搜索即可。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40</span>, C = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k, dp[<span class="number">1</span> &lt;&lt; C];</div><div class="line">ll adj[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxc</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, x; j &lt; n; j++) &#123;</div><div class="line">            x = read(), adj[i] |= (ll) (x || i == j) &lt;&lt; j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; max(<span class="number">0</span>, n - C)); i++) &#123;</div><div class="line">        <span class="keyword">int</span> x = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; j++) &#123;</div><div class="line">            <span class="keyword">if</span> ((i &gt;&gt; j) &amp; <span class="number">1</span>) x &amp;= adj[j + C] &gt;&gt; C;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (x == i) dp[i] = __builtin_popcount(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; max(<span class="number">0</span>, n - C)); i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; j++) &#123;</div><div class="line">            <span class="keyword">if</span> ((i &gt;&gt; j) &amp; <span class="number">1</span>) dp[i] = max(dp[i], dp[i ^ (<span class="number">1</span> &lt;&lt; j)]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; min(C, n)); i++) &#123;</div><div class="line">        <span class="keyword">int</span> x = i, y = (<span class="number">1</span> &lt;&lt; max(<span class="number">0</span>, n - C)) - <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; min(C, n); j++) &#123;</div><div class="line">            <span class="keyword">if</span> ((i &gt;&gt; j) &amp; <span class="number">1</span>) x &amp;= adj[j] &amp; ((<span class="number">1</span> &lt;&lt; C) - <span class="number">1</span>), y &amp;= adj[j] &gt;&gt; C;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (x != i) <span class="keyword">continue</span>;</div><div class="line">        ret = max(ret, __builtin_popcount(i) + dp[y]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    n = read(), k = read();</div><div class="line">    <span class="keyword">int</span> c = maxc();</div><div class="line">    ld x = (ld) k / c;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%.8Lf\n"</span>, x * x * c * (c - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-Arya-and-Bran&quot;&gt;&lt;a href=&quot;#A-Arya-and-Bran&quot; class=&quot;headerlink&quot; title=&quot;A. Arya and Bran&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;a href=&quot;http://codeforces.com/c
      
    
    </summary>
    
    
      <category term="CodeForces" scheme="http://jstztzy.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Regular Contest 082</title>
    <link href="http://jstztzy.github.io/2017/09/24/AtCoder-Regular-Contest-082/"/>
    <id>http://jstztzy.github.io/2017/09/24/AtCoder-Regular-Contest-082/</id>
    <published>2017-09-23T16:39:55.000Z</published>
    <updated>2017-09-28T04:57:01.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Together"><a href="#C-Together" class="headerlink" title="C - Together"></a><center><a href="http://arc082.contest.atcoder.jp/tasks/arc082_a" target="_blank" rel="external">C - Together</a></center></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$N$个数，求它们或加一或减一或不变的众数。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>没什么好说的。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> cnt[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> ai = read();</div><div class="line">        cnt[ ai ]++, cnt[ ai+<span class="number">1</span> ]++, cnt[ ai<span class="number">-1</span> ]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1e5</span>; i++) res = max(res, cnt[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="D-Derangement"><a href="#D-Derangement" class="headerlink" title="D - Derangement"></a><center><a href="http://arc082.contest.atcoder.jp/tasks/arc082_b" target="_blank" rel="external">D - Derangement</a></center></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定$N$个数的一个排列，每次只能交换相邻两数，求最少的交换次数使得$p_i\neq i$。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>模拟一下，如果碰到$p_i=i$就把它和后面一个数交换。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> p[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = read();</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">if</span> (p[i] == i) res++, swap(p[i], p[i + <span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (p[n] == n) res++;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="E-ConvexScore"><a href="#E-ConvexScore" class="headerlink" title="E - ConvexScore"></a><center><a href="http://arc082.contest.atcoder.jp/tasks/arc082_c" target="_blank" rel="external">E - ConvexScore</a></center></h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定$N$个点$(x_i,y_i)$，定义这$N$个点的子集$S$为“凸多边形集”当且仅当$S$中所有点恰好构成一个凸多边形。对一个“凸多边形集”$S$，定义它的$score$为$2^{n-|S|}$，其中$n$为$S$构成的凸多边形包含（包括边上）的$N$个点中的点数。求所有“凸多边形集”的$score$之和对$998244353$取模的结果。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>题目要我们求的$2^{n-|S|}$对应的是一种集合取点的方案。<br>我们考虑这$N$个点的任意子集$X$要被计算$score$，当且仅当它的凸包面积为正。<br>再进一步，计算时<strong>任意凸包面积为正的子集对$score$的贡献为$1$</strong>，因为你把凸包上的点作为“凸多边形集”，其余的点作为一种取点的方案，恰好对应了“凸多边形集”的所有取点方案。<br>然后我们就只要从$2^N$中把能组成直线的点集去掉。（注意不要重复算单点和空集的情况）<br>去除共线的点集时，我们考虑枚举$N^2$个点对组成的线段，先把斜率化成最简分数$hash$一下排个序，然后对每个线段<strong>并查集</strong>维护即可。<br>时间复杂度：$\Theta (N^2logN)$。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Q = <span class="number">998244353</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">209</span>;</div><div class="line">ll x[N], y[N], p[N], f[N], size[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findSet</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = findSet(f[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">unionSet</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> fx = findSet(x), fy = findSet(y);</div><div class="line">    <span class="keyword">if</span> (fx != fy) &#123;</div><div class="line">        f[fy] = fx;</div><div class="line">        size[fx] += size[fy];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> p, q; ll hash;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Seg &amp;rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> hash &lt; rhs.hash;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Seg&gt; seg;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</div><div class="line">        p[i] = p[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>, p[i] %= Q;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        x[i] = read(), y[i] = read();</div><div class="line">    &#125;</div><div class="line">    ll res = (p[n] - n - <span class="number">1</span>) % Q;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> dx = x[i] - x[j], dy = y[i] - y[j], g = gcd(dx, dy);</div><div class="line">            dx /= g, dy /= g;</div><div class="line">            <span class="keyword">if</span> (dx == <span class="number">0</span>) dy = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (dy == <span class="number">0</span>) dx = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (dx &lt; <span class="number">0</span>) dx *= <span class="number">-1</span>, dy *= <span class="number">-1</span>;</div><div class="line">            Seg s; s.p = i, s.q = j, s.hash = dx * <span class="number">100000</span> + dy;</div><div class="line">            seg.push_back(s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(seg.begin(), seg.end());</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; seg.size(); i = j) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</div><div class="line">            f[k] = k, size[k] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (; j &lt; seg.size() &amp;&amp; seg[i].hash == seg[j].hash; j++) &#123;</div><div class="line">            unionSet(seg[j].p, seg[j].q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</div><div class="line">            <span class="keyword">if</span> (f[k] == k &amp;&amp; size[k] &gt;= <span class="number">2</span>) &#123;</div><div class="line">                res -= (p[ size[k] ] - size[k] - <span class="number">1</span>), res += Q, res %= Q;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="F-Sandglass"><a href="#F-Sandglass" class="headerlink" title="F - Sandglass"></a><center><a href="http://arc082.contest.atcoder.jp/tasks/arc082_d" target="_blank" rel="external">F - Sandglass</a></center></h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给定一个总容量为$X$的沙漏，初始状态$A$部分有$a$克沙子，$B$部分有$X-a$克沙子，每秒钟掉下来$1$克沙子。有$K$个$r_i$时刻会将沙漏倒置。现在有$Q$个询问$(t_i,a_i)$，初始$A$部分在上面且有沙子$a_i$克。求在$t_i$时刻$A$部分的沙子多少克。</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>假设$A$部分沙子初始有$x$克，在$t$时刻时的沙子有$f_t(x)$克。<br>当某时刻$A$部分有$y$克沙子时，下一秒钟：<br>若$A$部分在上面，则$f_t(x)=g_1(y)=max(y-1,0)$;<br>若$A$部分在下面，则$f_t(x)=g_2(y)=max(y+1,X)$.<br>因为$f_t$是在函数$g_1,g_2$下封闭的，所以它一定是个如下的线性分段函数：<br>$\begin{equation}<br>  f_t(x)=<br>  \begin{cases}<br>  a+c,&amp;0\leq x\leq a\newline<br>  x+c,&amp;a\leq x\leq b\newline<br>  b+c,&amp;b\leq x\leq X<br>  \end{cases}<br>\end{equation}$<br>对于每个$t$维护上式中的$a,b,c$，然后回答询问即可。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line">ll r[K];</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">(ll &amp;v, ll x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (v &gt; x) v = x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll x = read(), k = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) r[i] = read();</div><div class="line">    ll q = read();</div><div class="line">    ll low = <span class="number">0</span>, mid = <span class="number">0</span>, upp = x;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, sign = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (q--) &#123;</div><div class="line">        ll t = read(), a = read();</div><div class="line">        <span class="keyword">while</span> (i &lt;= k &amp;&amp; r[i] &lt;= t) &#123;</div><div class="line">            ll dta = (r[i] - r[i - <span class="number">1</span>]) * sign;</div><div class="line">            low += dta, upp += dta, mid += dta;</div><div class="line">            turn(low, x), turn(mid, x);</div><div class="line">            i++, sign *= <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        ll res = a + mid;</div><div class="line">        ll dta = (t - r[i - <span class="number">1</span>]) * sign;</div><div class="line">        <span class="keyword">if</span> (res &lt; low) res = low;</div><div class="line">        <span class="keyword">if</span> (res &gt; upp) res = upp;</div><div class="line">        res += dta, turn(res, x);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-Together&quot;&gt;&lt;a href=&quot;#C-Together&quot; class=&quot;headerlink&quot; title=&quot;C - Together&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;a href=&quot;http://arc082.contest.atcoder.jp/task
      
    
    </summary>
    
    
      <category term="AtCoder" scheme="http://jstztzy.github.io/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #433</title>
    <link href="http://jstztzy.github.io/2017/09/24/Codeforces-Round-433/"/>
    <id>http://jstztzy.github.io/2017/09/24/Codeforces-Round-433/</id>
    <published>2017-09-23T16:26:14.000Z</published>
    <updated>2017-09-28T04:59:38.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="854A-Fraction"><a href="#854A-Fraction" class="headerlink" title="854A. Fraction"></a><center><a href="http://codeforces.com/problemset/problem/854/A" target="_blank" rel="external">854A. Fraction</a></center></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$，求分子分母和为$n$且分母最大的最简分数。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>暴力枚举。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = n / <span class="number">2</span>; a &gt;= <span class="number">1</span>; a--) &#123;</div><div class="line">        <span class="keyword">int</span> b = n - a;</div><div class="line">        <span class="keyword">if</span> (gcd(a, b) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, a, b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="854B-Maxim-Buys-an-Apartment"><a href="#854B-Maxim-Buys-an-Apartment" class="headerlink" title="854B. Maxim Buys an Apartment"></a><center><a href="http://codeforces.com/problemset/problem/854/B" target="_blank" rel="external">854B. Maxim Buys an Apartment</a></center></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定$n$和$k$，表示$n$个连续位置中已经放了$k$个点。现在继续在剩余位置放点，必须与$k$个点中至少一个相邻。求能放的点的数量最小值和最大值。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>最小值，除非$k=0$或$k=n$时为$0$，其他情况都为$1$。<br>最大值，考虑将$k$个点相隔两个放置一定最优，也就是一个点能管包括本身在内的三个点，画个图就明白了。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll n, k; <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">if</span> (k == n || k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"0 0"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"1 %lld\n"</span>, k * <span class="number">3</span> &gt;= n ? n - k : k * <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="853A-Planning"><a href="#853A-Planning" class="headerlink" title="853A. Planning"></a><center><a href="http://codeforces.com/problemset/problem/853/A" target="_blank" rel="external">853A. Planning</a></center></h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定$n$架飞机$1-n$，本来第$i$架对应在第$i$分钟起飞。由于延误，起飞时间区间改为$[k+1,k+n]$。第$i$架飞机延迟一分钟损失$c_i$。调整起飞时间，要求不能同时起飞，不能比原来早。求最小损失。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>贪心：对于$[k+1,k+n]$内的每个时刻，我们尽可能让能起飞且损失最大的飞机起飞。<br>下面我们简单证明一下：<br>设每架飞机新的起飞时间为$t_i$，则总损失为$\sum_{i=1}^{n}c_i\times (t_i-i)=\sum_{i=1}^{n}c_i\times t_i-\sum_{i=1}^{n}c_i\times i$。<br>我们注意到$\sum_{i=1}^{n}c_i\times i$是个常数，要求总损失最小，即让$\sum_{i=1}^{n}c_i\times t_i$最小。联想<strong>排序不等式</strong>，容易证明贪心的正确性。<br>在贪心过程中，我们需要维护当前时间能起飞飞机的损失最大值，使用$Heap$、$STL$中的$set$或$priority\_queue$即可。<br>时间复杂度：$\Theta(n\times logn)$。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pir;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> c[N], res[N];</div><div class="line">priority_queue&lt;pir&gt; pq;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), k = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i] = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) pq.push(make_pair(c[i], i));</div><div class="line">    ll cost = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k + <span class="number">1</span>; i &lt;= k + n; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i &lt;= n) pq.push(make_pair(c[i], i));</div><div class="line">        <span class="keyword">int</span> t = pq.top().second;</div><div class="line">        pq.pop();</div><div class="line">        res[t] = i;</div><div class="line">        cost += <span class="number">1l</span>l * (i - t) * c[t];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, cost);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, res[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res[n]);;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="853B-Jury-Meeting"><a href="#853B-Jury-Meeting" class="headerlink" title="853B. Jury Meeting"></a><center><a href="http://codeforces.com/problemset/problem/853/B" target="_blank" rel="external">853B. Jury Meeting</a></center></h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个城市的人要去城市$0$开会，有$m$架从城市$0$出发或者到达城市$0$的飞机，要求每个城市的人来了还要回去且$n$个城市的人呆在一起的时间大于等于$k$天。求最小花费。</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>首先，每个城市的人都需要一架去、一架回的飞机，那么在时间轴上，即要选$n$个线段使它们重合部分长度$\geq k$。<br>然后，我们考虑若第$i$天所有城市的人都在城市$0$，第$i$天之前要有$n$架不同飞机到达城市$0$，之后也要有$n$架不同飞机离开城市$0$。对于第$i$天，预处理<strong>前缀和</strong>$pre_i,suf_i$，分别表示第$i$天前、后，$n$架不同城市的飞机到达、离开城市$0$所需要的最少花费。<br>最后，按天数扫一遍，取$min_{1\leq i\leq d_{max}}pre_i+suf_{i+k+1}$即可。<br>时间复杂度：$\Theta(m\times \log m+n)$。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pir;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> D = <span class="number">1e6</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">1e12</span>;</div><div class="line"><span class="built_in">vector</span>&lt;pir&gt; fr[N], to[N];</div><div class="line">ll pre[D], suf[D];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), m = read(), k = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> d = read(), f = read(), t = read(), c = read();</div><div class="line">        <span class="keyword">if</span> (f) fr[f].push_back(make_pair(d, c));</div><div class="line">        <span class="keyword">if</span> (t) to[t].push_back(make_pair(d, c));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)     &#123;</div><div class="line">        sort(fr[i].begin(), fr[i].end(), less&lt;pir&gt;());</div><div class="line">        ll l1 = INF; pre[<span class="number">0</span>] += l1;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : fr[i]) &#123;</div><div class="line">            pre[p.first] += min(<span class="number">0l</span>l, p.second - l1);</div><div class="line">            l1 += min(<span class="number">0l</span>l, p.second - l1);</div><div class="line">        &#125;</div><div class="line">        sort(to[i].begin(), to[i].end(), greater&lt;pir&gt;());</div><div class="line">        ll l2 = INF; suf[D - <span class="number">1</span>] += l2;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : to[i]) &#123;</div><div class="line">            suf[p.first] += min(<span class="number">0l</span>l, p.second - l2);</div><div class="line">            l2 += min(<span class="number">0l</span>l, p.second - l2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; D; j++) pre[j] += pre[j - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = D - <span class="number">2</span>; j; j--) suf[j] += suf[j + <span class="number">1</span>];</div><div class="line">    ll res = n * INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D - k - <span class="number">1</span>; j++) res = min(res, pre[j] + suf[j + k + <span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * (res &gt;= INF ? <span class="built_in">puts</span>(<span class="string">"-1\n"</span>) : <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="853C-Boredom"><a href="#853C-Boredom" class="headerlink" title="853C. Boredom"></a><center><a href="http://codeforces.com/problemset/problem/853/C" target="_blank" rel="external">853C. Boredom</a></center></h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p>给定一个$n\times n$的点阵，每列有一个标记点；定义“美丽矩形”为任意两个标记点构成的矩形，显然一共有$\frac{n\times(n-1)}{2}$个。有$q$个询问，每次询问一个矩形与多少个“美丽矩形”相交。</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>我们考虑每个询问的矩形，将它的四条边延长下去，会将原来的点阵最多划分成$9$个矩形，统计每个小矩形中标记点的数量，简单容斥一下就能得到答案。<br>下面主要任务是预处理出前$i$列$[l,r]$行中标记点的数量，这个用<strong>可持久化线段树</strong>即可。<br>时间复杂度：$\Theta(n\times logn+8q\times logn)$。</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> tot, root[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, sum;</div><div class="line">&#125; tree[N * <span class="number">40</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1l</span>l * x * (x - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t, <span class="keyword">int</span> tt)</span> </span>&#123;</div><div class="line">    tree[t].sum++;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (m &lt;= mid) &#123;</div><div class="line">            tree[t].l = ++tot;</div><div class="line">            tree[ tree[t].l ] = tree[ tree[tt].l ];</div><div class="line">            update(m, l, mid, tree[t].l, tree[tt].l);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            tree[t].r = ++tot;</div><div class="line">            tree[ tree[t].r ] = tree[ tree[tt].r ];</div><div class="line">            update(m, mid+<span class="number">1</span>, r, tree[t].r, tree[tt].r);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t, <span class="keyword">int</span> tt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ql &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> tree[t].sum - tree[tt].sum;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>, mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (ql &lt;= mid) ret += query(ql, qr, l, mid, tree[t].l, tree[tt].l);</div><div class="line">        <span class="keyword">if</span> (qr &gt; mid) ret += query(ql, qr, mid+<span class="number">1</span>, r, tree[t].r, tree[tt].r);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), q = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> p = read();</div><div class="line">        root[i] = ++tot;</div><div class="line">        tree[ root[i] ] = tree[ root[i - <span class="number">1</span>] ];</div><div class="line">        update(p, <span class="number">1</span>, n, root[i], root[i - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</div><div class="line">        <span class="keyword">int</span> l = read(), d = read(), r = read(), u = read();</div><div class="line">        ll res = f(n);</div><div class="line">        res -= f( query(<span class="number">1</span>, d<span class="number">-1</span>, <span class="number">1</span>, n, root[n], root[<span class="number">0</span>]) );</div><div class="line">        res -= f( query(u+<span class="number">1</span>, n, <span class="number">1</span>, n, root[n], root[<span class="number">0</span>]) );</div><div class="line">        res -= f( query(<span class="number">1</span>, n, <span class="number">1</span>, n, root[l<span class="number">-1</span>], root[<span class="number">0</span>]) );</div><div class="line">        res -= f( query(<span class="number">1</span>, n, <span class="number">1</span>, n, root[n], root[r]) );</div><div class="line">        res += f( query(<span class="number">1</span>, d<span class="number">-1</span>, <span class="number">1</span>, n, root[l<span class="number">-1</span>], root[<span class="number">0</span>]));</div><div class="line">        res += f( query(<span class="number">1</span>, d<span class="number">-1</span>, <span class="number">1</span>, n, root[n], root[r]));</div><div class="line">        res += f( query(u+<span class="number">1</span>, n, <span class="number">1</span>, n, root[n], root[r]));</div><div class="line">        res += f( query(u+<span class="number">1</span>, n, <span class="number">1</span>, n, root[l<span class="number">-1</span>], root[<span class="number">0</span>]));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="853D-Michael-and-Charging-Stations"><a href="#853D-Michael-and-Charging-Stations" class="headerlink" title="853D. Michael and Charging Stations"></a><center><a href="http://codeforces.com/problemset/problem/853/D" target="_blank" rel="external">853D. Michael and Charging Stations</a></center></h1><h2 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个商品价格为$a_i=1000$或$a_i=2000$。每件商品若付全款，则将返回$10\%$的钱来抵现金。求最小花费。</p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p><del>吾本以为Div1.D必有高论。。。</del><br>裸$DP$。<br>首先，我们用$dp[i][j]$表示前$i$天可以抵现金的钱为$j$的最小花费。<br>然后，我们把价格都除以$100$，发现当前状态能抵现金的钱不可能超过$30$，否则显然可以用来买下一个商品，那么$j\leq 30$。<br>最后，$dp$方程就很显然了：<br>$\begin{equation}<br>  dp[i][j]=min<br>  \begin{cases}<br>  dp[i-1][j-\frac{a_i}{10}]+a_i&amp;，付全款\newline<br>  dp[i-1][j+max(0,a_i-j)]+max(0,a_i-j)&amp;，抵现金\newline<br>  \end{cases}<br>\end{equation}$<br>时间复杂度：$\Theta(30\times n)$。</p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> a[N], dp[<span class="number">2</span>][<span class="number">31</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read() / <span class="number">100</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) dp[<span class="number">0</span>][i] = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, b = <span class="number">1</span>; i &lt;= n; i++, b ^= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">30</span>; j++) dp[b][j] = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">30</span>; j++) &#123;</div><div class="line">            dp[b][ j + a[i] / <span class="number">10</span> ] = min(dp[b][ j + a[i] / <span class="number">10</span> ], dp[b ^ <span class="number">1</span>][j] + a[i]);</div><div class="line">            dp[b][ j - a[i] + max(a[i] - j, <span class="number">0</span>) ] = min(dp[b][ j - a[i] + max(a[i] - j, <span class="number">0</span>) ], dp[b ^ <span class="number">1</span>][j] + max(a[i] - j, <span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30</span>; i++) res = min(res, dp[n % <span class="number">2</span>][i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d00\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;854A-Fraction&quot;&gt;&lt;a href=&quot;#854A-Fraction&quot; class=&quot;headerlink&quot; title=&quot;854A. Fraction&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;a href=&quot;http://codeforces.com/problem
      
    
    </summary>
    
    
      <category term="CodeForces" scheme="http://jstztzy.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 28</title>
    <link href="http://jstztzy.github.io/2017/09/22/Educational-Codeforces-Round-28/"/>
    <id>http://jstztzy.github.io/2017/09/22/Educational-Codeforces-Round-28/</id>
    <published>2017-09-22T10:59:00.000Z</published>
    <updated>2017-09-24T16:20:18.094Z</updated>
    
    <content type="html"><![CDATA[<p>#<center><a href="http://codeforces.com/problemset/problem/846/A" target="_blank" rel="external">846A. Curriculum Vitae</a></center></p><p>##题意<br>给定一个长度为$n$的$01$序列，删掉一些数，使得最终数列中$0$不直接跟在$1$后面，求最长长度。</p><p>##题解<br>最终序列一定是$000…111$形式的，$\Theta(n)$枚举最后一个$0$的位置，用前缀和$\Theta(1)$统计一下即可。<br>时间复杂度：$\Theta(n)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">109</span>;</div><div class="line"><span class="keyword">int</span> s[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (r &gt;= l ? s[r] - s[l - <span class="number">1</span>] : <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i] = read() + s[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) res = max(res, i - count(<span class="number">1</span>, i) + count(i + <span class="number">1</span>, n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/B" target="_blank" rel="external">846B. Math Show</a></center></p><p>##题意<br>给定$n$个大题，每个大题都有$k$个小题，第$i$个小题需要花费$t_i$分钟。每做出一小题得$1$分，每做出完整的一个大题多得一分，即$k+1$分。求在$M$分钟完成的最大得分。</p><p>##题解<br>先枚举完整做出的大题数，再按每小题花费时间的<strong>贪心</strong>即可。<br>时间复杂度：$\Theta(n^2\times k)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">59</span>;</div><div class="line"><span class="keyword">int</span> t[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read(), k = read(), m = read(), s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) t[i] = read(), s += t[i];</div><div class="line">    sort(t + <span class="number">1</span>, t + k + <span class="number">1</span>);</div><div class="line">    ll res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</div><div class="line">        ll tim = i * s, cur = i * (k + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (tim &gt; m) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (tim + (n - i) * t[j] &lt;= m) tim += (n - i) * t[j], cur += (n - i);</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">while</span> (tim + t[j] &lt;= m) tim += t[j], cur++;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        res = max(res, cur);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/C" target="_blank" rel="external">846C. Four Segments</a></center></p><p>##题意<br>给定长度为$n$的数列$a_0,a<em>1,…,a</em>{n-1}$，定义$sum(l,r)$为区间$[l,r)$内$a_i$的和。求三个数$delim_0,delim_1,delim_2(0\leq delim_0\leq delim_1\leq delim_2<br>\leq n)$将数列分成四段，使得$res=sum(0,delim_0)-sum(delim_0,delim_1)+sum(delim_1,delim_2)-sum(delim_2,n)$最大。</p><p>##题解<br>考虑先枚举$delim_1$定下来，再在区间$[0,delim_1]$和$[delim_1,n]$中分别枚举$delim_0$和$delim_2$，这时只要让$sum(0,d_0)$和$sum(d1,d2)$同时取最大，用<strong>前缀和</strong>加速即可。<br>时间复杂度：$\Theta(n^2)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DE(x) cout &lt;&lt; x &lt;&lt; endl</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5009</span>;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line">ll s[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sol</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> d0, d1, d2;</div><div class="line">    ll res;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &lt; <span class="number">0</span>) <span class="keyword">return</span> s[r - <span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> l &lt;= r ? s[r - <span class="number">1</span>] - s[l - <span class="number">1</span>] : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = read();</div><div class="line">    s[<span class="number">0</span>] = a[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) s[i] = s[i - <span class="number">1</span>] + a[i];</div><div class="line">    Sol ans; ans.d0 = ans.d1 = ans.d2 = ans.res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d1 = <span class="number">0</span>; d1 &lt;= n; d1++) &#123;</div><div class="line">        <span class="keyword">int</span> d0 = d1, d2 = d1;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= d1; j++) <span class="keyword">if</span> (sum(<span class="number">0</span>, j) &gt; sum(<span class="number">0</span>, d0)) d0 = j;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = d1; j &lt;= n; j++) <span class="keyword">if</span> (sum(d1, j) &gt; sum(d1, d2)) d2 = j;</div><div class="line">        ll res = sum(<span class="number">0</span>, d0) - sum(d0, d1) + sum(d1, d2) - sum(d2, n);</div><div class="line">        <span class="keyword">if</span> (res &gt; ans.res) ans.res = res, ans.d0 = d0, ans.d1 = d1, ans.d2 = d2;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, ans.d0, ans.d1, ans.d2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/D" target="_blank" rel="external">846D. Monitor</a></center></p><p>##题意<br>给定一$n\times m$个的点阵，其中有$q$个点$(x_i,y_i)$会在$t_i$时刻变成坏点。求最少何时，存在一个$k\times k$的点阵全是坏点。</p><p>##题解<br><strong>二分</strong>时间，单调性显然，用<strong>二维前缀和</strong>判断是否全是坏点即可。<br>时间复杂度：$\Theta(n^2\times \log q)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">509</span>;</div><div class="line"><span class="keyword">int</span> n, m, k, q, x[N*N], y[N*N], t[N*N], s[N][N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">broke</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="keyword">if</span> (t[i] &lt;= mid) s[ x[i] ][ y[i] ] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</div><div class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (s[i][j] - s[i - k][j] - s[i][j - k] + s[i - k][j - k] == k * k) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    n = read(), m = read(), k = read(), q = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) x[i] = read(), y[i] = read(), t[i] = read(), t[<span class="number">0</span>] = max(t[<span class="number">0</span>], t[i]);</div><div class="line">    <span class="keyword">int</span> l = <span class="number">-1</span>, r = t[<span class="number">0</span>] + <span class="number">1</span>, res = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (l + <span class="number">1</span> &lt; r) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (broke(mid)) r = mid, res = r; <span class="keyword">else</span> l = mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/E" target="_blank" rel="external">846E. Chemistry in Berland</a></center></p><p>##题意<br>给定$n$个物品，现各有$b_i$千克，各需要$a_i$千克。其中$k_i$千克的$x_i$物品可以转化成$1$千克的$i$物品，$1$千克的$i$物品可以转化成$1$千克的$x_i$物品。判断能否通过转化使得$n$种物品都满足需求。</p><p>##题解<br>树形$DP$。按着题目所述转化条件转移状态即可。注意数据范围。<br>时间复杂度：$\Theta(n)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">9</span>;</div><div class="line">ll sum, a[N], b[N], x[N], k[N];</div><div class="line"><span class="built_in">vector</span>&lt;pll&gt; g[N];</div><div class="line"><span class="keyword">bool</span> flag = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : g[u]) &#123;</div><div class="line">        <span class="keyword">int</span> k = e.first, v = e.second;</div><div class="line">        dfs(v);</div><div class="line">        <span class="keyword">if</span> (b[v] &gt; <span class="number">0</span>) b[u] += b[v];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">double</span> w = <span class="number">1.0</span> * b[v] * k;</div><div class="line">            <span class="keyword">if</span> (b[u] + w &lt; -sum) flag = <span class="number">0</span>;</div><div class="line">            b[u] += b[v] * k;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b[i] = read(), sum += b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read(), b[i] -= a[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x = read(), k = read();</div><div class="line">        g[x].push_back(make_pair(k, i));</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(b[<span class="number">1</span>] &gt;= <span class="number">0</span> ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>#<center><a href="http://codeforces.com/problemset/problem/846/F" target="_blank" rel="external">846F. Random Query</a></center></p><p>##题意<br>给定$n$个正整数$a_i$，每次随机地选择两个数$l,r$（若$l&gt;r$，则交换两者），定义$(l,r)$的$value$为$a<em>l,a</em>{l+1},…,a_r$中不同的数的个数。求$value$的期望。</p><p>##题解<br>我们考虑计算$a<em>l,a</em>{l+1},…,a_r$中每个数第一次出现的位置。记$pre[i]$表示$i$之前与$a_i$相等的最近的一个数的位置，则$a<em>i$能对所有$l\in (pre[i],i],r\in [i,n]$的所有区间产生$1$个贡献。<br>故所求期望为$res=\frac{2*\sum</em>{i=1}^{n}{(i-pre[i])(n-i+1)}-n}{n^2}$。<br>时间复杂度：$\Theta(n)$。</p><p>##代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">9</span>;</div><div class="line"><span class="keyword">int</span> a[N], pos[N], pre[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">1</span>, a = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) s = <span class="number">-1</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;a = a * <span class="number">10</span> + ch - <span class="string">'0'</span>; ch = getchar();&#125;</div><div class="line">    <span class="keyword">return</span> s * a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read(), pre[i] = pos[ a[i] ], pos[ a[i] ] = i;</div><div class="line">    ll res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) res += <span class="number">1l</span>l * (i - pre[i]) * (n - i + <span class="number">1</span>);</div><div class="line">    res = res * <span class="number">2</span> - n;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, <span class="number">1.0</span> *  res / (<span class="number">1l</span>l * n * n));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#&lt;center&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/846/A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;846A. Curriculum Vitae&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="CodeForces" scheme="http://jstztzy.github.io/tags/CodeForces/"/>
    
  </entry>
  
</feed>
